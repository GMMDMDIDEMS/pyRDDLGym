domain hvac_vav_fix{
    types {
        space : object;
    };

    pvariables {
        //Constants
        ADJ(space, space) : { non-fluent, bool, default = false };
        ADJ_OUTSIDE(space) : { non-fluent, bool, default = false };
        ADJ_HALL(space) : { non-fluent, bool, default = false };
        R_OUTSIDE(space) : { non-fluent, real, default = 4};
        R_HALL(space) : { non-fluent, real, default = 2};
        R_WALL(space, space) : { non-fluent, real, default = 1.5 };
        IS_ROOM(space) : { non-fluent, bool, default = false };
        CAP(space) : { non-fluent, real, default = 80 };
        CAP_AIR : { non-fluent, real, default = 1.006 };
        COST_AIR : { non-fluent, real, default = 1 };
        TIME_DELTA : { non-fluent, real, default = 1 };
        TEMP_AIR : { non-fluent, real, default = 40 };
        TEMP_UP(space) : { non-fluent, real, default = 23.5 };
        TEMP_LOW(space) : { non-fluent, real, default = 20.0 };
        TEMP_OUTSIDE(space) : { non-fluent, real, default = 6.0 };
        TEMP_HALL(space) : { non-fluent, real, default = 10.0 };
        PENALTY : { non-fluent, real, default = 20000 };
        AIR_MAX(space) : { non-fluent, real, default = 10.0 };
        TEMP(space): { state-fluent, real, default = 10.0 };
        AIR(space): { action-fluent, real, default = 0.0 };
    };

    cpfs {
        //TEMP'(?s) = (sum_{?d : space, ?p : space} [ R_WALL(?s, ?p) ]) + IS_ROOM(?s);

        //TEMP'(?s) = IS_ROOM(?s) + sum_{?p : space} [ R_WALL(?s, ?p) ];

        //TEMP'(?s) = (forall_{?p : space} [R_WALL(?s, ?p)])
        //            + (sum_{?p : space} [R_WALL(?s, ?p)])
        //            + IS_ROOM(?s);

        //TEMP'(?s) = (sum_{?s : space} [TEMP_AIR + TEMP(?s)]) + IS_ROOM(?s);

        //State
        //TEMP'(?s) =
        //    if (IS_ROOM(?s))
        //        then TEMP(?s) + TIME_DELTA/CAP(?s) *
        //        (AIR(?s) * CAP_AIR * (TEMP_AIR - TEMP(?s)) * IS_ROOM(?s)
        //        + (avg_{?p : space} [(ADJ(?s, ?p) | ADJ(?p, ?s)) * (TEMP(?p) - TEMP(?s)) / R_WALL(?s, ?p)])
        //        + ADJ_OUTSIDE(?s)*(TEMP_OUTSIDE(?s) - TEMP(?s))/ R_OUTSIDE(?s)
        //        + ADJ_HALL(?s)*(TEMP_HALL(?s)-TEMP(?s))/R_HALL(?s))
        //    else
        //        TEMP(?s) + TEMP(?s) ;


        TEMP'(?s) =
            TEMP(?s) + TIME_DELTA/CAP(?s) *
            (AIR(?s) * CAP_AIR * (TEMP_AIR - TEMP(?s)) * IS_ROOM(?s)
            + (max_{?p : space} [(ADJ(?s, ?p) | ADJ(?p, ?s)) * (TEMP(?p) - TEMP(?s)) / R_WALL(?s, ?p)])
            + ADJ_OUTSIDE(?s)*(TEMP_OUTSIDE(?s) - TEMP(?s))/ R_OUTSIDE(?s)
            + ADJ_HALL(?s)*(TEMP_HALL(?s)-TEMP(?s))/R_HALL(?s)) ;
    };

    reward = 10 ;

        // - (sum_{?s : space} IS_ROOM(?s)*(AIR(?s) * COST_AIR
        // + ((TEMP(?s) < TEMP_LOW(?s)) | (TEMP(?s) > TEMP_UP(?s))) * PENALTY)
        // + 10.0*abs[((TEMP_UP(?s) + TEMP_LOW(?s))/2.0) - TEMP(?s)]);

    //action-preconditions{
    //    forall_{?s : space} [ AIR(?s) >= 0 ];
    //    forall_{?s : space} [ AIR(?s) <= AIR_MAX(?s)];
    //};
}


non-fluents nf_hvac_vav_fix{
    domain = hvac_vav_fix;
    objects{
        space : { r1, r2, r3 };
    };

    non-fluents {
        //Define rooms
        IS_ROOM(r1) = true;IS_ROOM(r2) = true;IS_ROOM(r3) = true;

        //Define the adjacency
        ADJ(r1, r2) = true; ADJ(r2, r3) = true;

        ADJ_OUTSIDE(r1) = true;ADJ_OUTSIDE(r3) = true;

        ADJ_HALL(r1) = true;ADJ_HALL(r2) = true;ADJ_HALL(r3) = true;
    };
}

instance inst_hvac_vav_fix{
    domain = hvac_vav_fix;
    non-fluents = nf_hvac_vav_fix;

    horizon = 20;
    discount = 1.0;
}
