Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOLLAR_SIGN
    DOT
    MULTINOMIAL
    QUESTION
    TERMINAL

Grammar

Rule 0     S' -> rddl
Rule 1     rddl -> rddl_block
Rule 2     rddl_block -> rddl_block domain_block
Rule 3     rddl_block -> rddl_block instance_block
Rule 4     rddl_block -> rddl_block nonfluent_block
Rule 5     rddl_block -> empty
Rule 6     domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY
Rule 7     req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI
Rule 8     req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI
Rule 9     req_section -> empty
Rule 10    domain_list -> domain_list type_section
Rule 11    domain_list -> domain_list pvar_section
Rule 12    domain_list -> domain_list cpf_section
Rule 13    domain_list -> domain_list reward_section
Rule 14    domain_list -> domain_list termination_section
Rule 15    domain_list -> domain_list action_precond_section
Rule 16    domain_list -> domain_list state_action_constraint_section
Rule 17    domain_list -> domain_list state_invariant_section
Rule 18    domain_list -> empty
Rule 19    type_section -> TYPES LCURLY type_list RCURLY SEMI
Rule 20    type_list -> type_list type_def
Rule 21    type_list -> empty
Rule 22    type_def -> IDENT COLON OBJECT SEMI
Rule 23    type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI
Rule 24    enum_list -> enum_list COMMA ENUM_VAL
Rule 25    enum_list -> ENUM_VAL
Rule 26    enum_list -> empty
Rule 27    pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI
Rule 28    pvar_list -> pvar_list pvar_def
Rule 29    pvar_list -> empty
Rule 30    pvar_def -> nonfluent_def
Rule 31    pvar_def -> statefluent_def
Rule 32    pvar_def -> actionfluent_def
Rule 33    pvar_def -> intermfluent_def
Rule 34    pvar_def -> derivedfluent_def
Rule 35    pvar_def -> observfluent_def
Rule 36    nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
Rule 37    statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
Rule 38    actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
Rule 39    intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
Rule 40    intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI
Rule 41    derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
Rule 42    derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI
Rule 43    observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI
Rule 44    cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI
Rule 45    cpf_header -> CPFS
Rule 46    cpf_header -> CDFS
Rule 47    cpf_list -> cpf_list cpf_def
Rule 48    cpf_list -> empty
Rule 49    cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI
Rule 50    reward_section -> REWARD ASSIGN_EQUAL expr SEMI
Rule 51    termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI
Rule 52    termination_section -> TERMINATION LCURLY RCURLY SEMI
Rule 53    termination_list -> termination_list termination_cond_def
Rule 54    termination_list -> termination_cond_def
Rule 55    termination_cond_def -> expr SEMI
Rule 56    action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI
Rule 57    action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI
Rule 58    action_precond_list -> action_precond_list action_precond_def
Rule 59    action_precond_list -> action_precond_def
Rule 60    action_precond_def -> expr SEMI
Rule 61    state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI
Rule 62    state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI
Rule 63    state_cons_list -> state_cons_list state_cons_def
Rule 64    state_cons_list -> state_cons_def
Rule 65    state_cons_def -> expr SEMI
Rule 66    state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI
Rule 67    state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI
Rule 68    state_invariant_list -> state_invariant_list state_invariant_def
Rule 69    state_invariant_list -> state_invariant_def
Rule 70    state_invariant_def -> expr SEMI
Rule 71    term_list -> term_list COMMA term
Rule 72    term_list -> term
Rule 73    term_list -> empty
Rule 74    term -> VAR
Rule 75    term -> ENUM_VAL
Rule 76    term -> pvar_expr
Rule 77    expr -> pvar_expr
Rule 78    expr -> group_expr
Rule 79    expr -> function_expr
Rule 80    expr -> relational_expr
Rule 81    expr -> boolean_expr
Rule 82    expr -> quantifier_expr
Rule 83    expr -> numerical_expr
Rule 84    expr -> aggregation_expr
Rule 85    expr -> control_expr
Rule 86    expr -> randomvar_expr
Rule 87    pvar_expr -> IDENT LPAREN term_list RPAREN
Rule 88    pvar_expr -> IDENT
Rule 89    group_expr -> LBRACK expr RBRACK
Rule 90    group_expr -> LPAREN expr RPAREN
Rule 91    function_expr -> IDENT LBRACK expr_list RBRACK
Rule 92    relational_expr -> expr COMP_EQUAL expr
Rule 93    relational_expr -> expr NEQ expr
Rule 94    relational_expr -> expr GREATER expr
Rule 95    relational_expr -> expr GREATEREQ expr
Rule 96    relational_expr -> expr LESS expr
Rule 97    relational_expr -> expr LESSEQ expr
Rule 98    boolean_expr -> expr AND expr
Rule 99    boolean_expr -> expr AMPERSAND expr
Rule 100   boolean_expr -> expr OR expr
Rule 101   boolean_expr -> expr IMPLY expr
Rule 102   boolean_expr -> expr EQUIV expr
Rule 103   boolean_expr -> NOT expr
Rule 104   boolean_expr -> bool_type
Rule 105   quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
Rule 106   quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
Rule 107   numerical_expr -> expr PLUS expr
Rule 108   numerical_expr -> expr MINUS expr
Rule 109   numerical_expr -> expr TIMES expr
Rule 110   numerical_expr -> expr DIV expr
Rule 111   numerical_expr -> MINUS expr
Rule 112   numerical_expr -> PLUS expr
Rule 113   numerical_expr -> INTEGER
Rule 114   numerical_expr -> DOUBLE
Rule 115   aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
Rule 116   control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr
Rule 117   control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
Rule 118   randomvar_expr -> BERNOULLI LPAREN expr RPAREN
Rule 119   randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN
Rule 120   randomvar_expr -> KRON_DELTA LPAREN expr RPAREN
Rule 121   randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN
Rule 122   randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN
Rule 123   randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN
Rule 124   randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
Rule 125   randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN
Rule 126   randomvar_expr -> POISSON LPAREN expr RPAREN
Rule 127   randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN
Rule 128   randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN
Rule 129   typed_var_list -> typed_var_list COMMA typed_var
Rule 130   typed_var_list -> typed_var
Rule 131   typed_var -> VAR COLON IDENT
Rule 132   expr_list -> expr_list COMMA expr
Rule 133   expr_list -> expr
Rule 134   case_list -> case_list COMMA case_def
Rule 135   case_list -> case_def
Rule 136   case_def -> CASE term COLON expr
Rule 137   case_def -> DEFAULT COLON expr
Rule 138   lconst_case_list -> lconst COLON expr
Rule 139   lconst_case_list -> lconst COLON OTHERWISE
Rule 140   lconst_case_list -> lconst_case_list COMMA lconst COLON expr
Rule 141   lconst -> IDENT
Rule 142   lconst -> ENUM_VAL
Rule 143   param_list -> COLON
Rule 144   param_list -> LPAREN param_list2 RPAREN COLON
Rule 145   param_list2 -> type_spec
Rule 146   param_list2 -> param_list2 COMMA type_spec
Rule 147   type_spec -> IDENT
Rule 148   type_spec -> INT
Rule 149   type_spec -> REAL
Rule 150   type_spec -> BOOL
Rule 151   range_const -> bool_type
Rule 152   range_const -> double_type
Rule 153   range_const -> int_type
Rule 154   range_const -> IDENT
Rule 155   bool_type -> TRUE
Rule 156   bool_type -> FALSE
Rule 157   double_type -> DOUBLE
Rule 158   double_type -> MINUS DOUBLE
Rule 159   double_type -> POS_INF
Rule 160   double_type -> NEG_INF
Rule 161   int_type -> INTEGER
Rule 162   int_type -> MINUS INTEGER
Rule 163   pos_int_type_or_pos_inf -> INTEGER
Rule 164   pos_int_type_or_pos_inf -> POS_INF
Rule 165   instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY
Rule 166   instance_list -> instance_list domain_section
Rule 167   instance_list -> instance_list nonfluents_section
Rule 168   instance_list -> instance_list objects_section
Rule 169   instance_list -> instance_list init_state_section
Rule 170   instance_list -> instance_list max_nondef_actions_section
Rule 171   instance_list -> instance_list horizon_spec_section
Rule 172   instance_list -> instance_list discount_section
Rule 173   instance_list -> empty
Rule 174   domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI
Rule 175   nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI
Rule 176   objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI
Rule 177   init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI
Rule 178   max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI
Rule 179   horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI
Rule 180   horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN
Rule 181   discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI
Rule 182   nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY
Rule 183   nonfluent_list -> nonfluent_list domain_section
Rule 184   nonfluent_list -> nonfluent_list objects_section
Rule 185   nonfluent_list -> nonfluent_list init_non_fluent_section
Rule 186   nonfluent_list -> empty
Rule 187   init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI
Rule 188   objects_list -> objects_list objects_def
Rule 189   objects_list -> objects_def
Rule 190   objects_list -> empty
Rule 191   objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI
Rule 192   object_const_list -> object_const_list COMMA IDENT
Rule 193   object_const_list -> IDENT
Rule 194   pvar_inst_list -> pvar_inst_list pvar_inst_def
Rule 195   pvar_inst_list -> pvar_inst_def
Rule 196   pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI
Rule 197   pvar_inst_def -> IDENT SEMI
Rule 198   pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI
Rule 199   pvar_inst_def -> NOT IDENT SEMI
Rule 200   pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
Rule 201   pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI
Rule 202   lconst_list -> lconst_list COMMA lconst
Rule 203   lconst_list -> lconst
Rule 204   string_list -> string_list COMMA IDENT
Rule 205   string_list -> IDENT
Rule 206   string_list -> empty
Rule 207   empty -> <empty>

Terminals, with rules where they appear

ACTION               : 38
ACTION_PRECONDITIONS : 56 57
AMPERSAND            : 99
AND                  : 98
ASSIGN_EQUAL         : 7 36 37 38 39 41 49 50 174 175 178 179 180 181 200 201
BERNOULLI            : 118
BOOL                 : 150
CASE                 : 136
CDFS                 : 46
COLON                : 22 23 131 136 137 138 139 140 143 144 191
COMMA                : 24 36 36 37 37 38 38 39 39 40 41 41 42 43 71 121 122 124 125 127 128 129 132 134 140 146 192 202 204
COMP_EQUAL           : 92
CPFS                 : 45
DEFAULT              : 36 37 38 137
DERIVED_FLUENT       : 41 42
DIRAC_DELTA          : 119
DIRICHLET            : 125
DISCOUNT             : 181
DISCRETE             : 124
DIV                  : 110
DOLLAR_SIGN          : 
DOMAIN               : 6 174
DOT                  : 
DOUBLE               : 114 157 158 181
ELSE                 : 116
ENUM_VAL             : 24 25 75 142
EQUIV                : 102
EXISTS               : 106
EXPONENTIAL          : 123
FALSE                : 156
FORALL               : 105
GAMMA                : 128
GREATER              : 94
GREATEREQ            : 95
HORIZON              : 179 180
IDENT                : 6 22 23 36 37 38 39 40 41 42 43 87 88 91 115 124 125 131 141 147 154 165 174 175 182 191 192 193 196 197 198 199 200 201 204 205
IF                   : 116
IMPLY                : 101
INIT_STATE           : 177
INSTANCE             : 165
INT                  : 148
INTEGER              : 113 161 162 163
INTERMEDIATE         : 39 40
KRON_DELTA           : 120
LBRACK               : 89 91
LCURLY               : 6 7 8 19 23 27 36 37 38 39 40 41 42 43 44 51 52 56 57 61 62 66 67 105 106 115 117 165 176 177 182 187 191
LESS                 : 96
LESSEQ               : 97
LEVEL                : 39 41
LPAREN               : 87 90 116 117 118 119 120 121 122 123 124 125 126 127 128 144 180 196 198 200
MAX_NONDEF_ACTIONS   : 178
MINUS                : 108 111 158 162
MULTINOMIAL          : 
NEG_INF              : 160
NEQ                  : 93
NON_FLUENT           : 36
NON_FLUENTS          : 175 182 187
NORMAL               : 122
NOT                  : 103 198 199
OBJECT               : 22
OBJECTS              : 176
OBSERVATION          : 43
OR                   : 100
OTHERWISE            : 139
PLUS                 : 107 112
POISSON              : 126
POS_INF              : 159 164
PVARIABLES           : 27
QUESTION             : 
RBRACK               : 89 91
RCURLY               : 6 7 8 19 23 27 36 37 38 39 40 41 42 43 44 51 52 56 57 61 62 66 67 105 106 115 117 165 176 177 182 187 191
REAL                 : 149
REQUIREMENTS         : 7 8
REWARD               : 50
RPAREN               : 87 90 116 117 118 119 120 121 122 123 124 125 126 127 128 144 180 196 198 200
SEMI                 : 7 8 19 22 23 27 36 37 38 39 40 41 42 43 44 49 50 51 52 55 56 57 60 61 62 65 66 67 70 174 175 176 177 178 179 181 187 191 196 197 198 199 200 201
STATE                : 37
STATE_ACTION_CONSTRAINTS : 61 62
STATE_INVARIANTS     : 66 67
SWITCH               : 117
TERMINAL             : 
TERMINATE_WHEN       : 180
TERMINATION          : 51 52
THEN                 : 116
TIMES                : 109
TRUE                 : 155
TYPES                : 19
UNDERSCORE           : 105 106 115
UNIFORM              : 121
VAR                  : 74 131
WEIBULL              : 127
error                : 

Nonterminals, with rules where they appear

action_precond_def   : 58 59
action_precond_list  : 56 58
action_precond_section : 15
actionfluent_def     : 32
aggregation_expr     : 84
bool_type            : 104 151
boolean_expr         : 81
case_def             : 134 135
case_list            : 117 134
control_expr         : 85
cpf_def              : 47
cpf_header           : 44
cpf_list             : 44 47
cpf_section          : 12
derivedfluent_def    : 34
discount_section     : 172
domain_block         : 2
domain_list          : 6 10 11 12 13 14 15 16 17
domain_section       : 166 183
double_type          : 152
empty                : 5 9 18 21 26 29 48 73 173 186 190 206
enum_list            : 23 24
expr                 : 49 50 55 60 65 70 89 90 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 105 106 107 107 108 108 109 109 110 110 111 112 115 116 116 116 118 119 120 121 121 122 122 123 125 126 127 127 128 128 132 133 136 137 138 140 180
expr_list            : 91 132
function_expr        : 79
group_expr           : 78
horizon_spec_section : 171
init_non_fluent_section : 185
init_state_section   : 169
instance_block       : 3
instance_list        : 165 166 167 168 169 170 171 172
int_type             : 153
intermfluent_def     : 33
lconst               : 138 139 140 202 203
lconst_case_list     : 124 140
lconst_list          : 196 198 200 202
max_nondef_actions_section : 170
nonfluent_block      : 4
nonfluent_def        : 30
nonfluent_list       : 182 183 184 185
nonfluents_section   : 167
numerical_expr       : 83
object_const_list    : 191 192
objects_def          : 188 189
objects_list         : 176 188
objects_section      : 168 184
observfluent_def     : 35
param_list           : 36 37 38 39 40 41 42 43
param_list2          : 144 146
pos_int_type_or_pos_inf : 178 179
pvar_def             : 28
pvar_expr            : 49 76 77
pvar_inst_def        : 194 195
pvar_inst_list       : 177 187 194
pvar_list            : 27 28
pvar_section         : 11
quantifier_expr      : 82
randomvar_expr       : 86
range_const          : 36 37 38 39 41 200 201
rddl                 : 0
rddl_block           : 1 2 3 4
relational_expr      : 80
req_section          : 6
reward_section       : 13
state_action_constraint_section : 16
state_cons_def       : 63 64
state_cons_list      : 61 63
state_invariant_def  : 68 69
state_invariant_list : 66 68
state_invariant_section : 17
statefluent_def      : 31
string_list          : 7 8 204
term                 : 71 72 117 136
term_list            : 71 87
termination_cond_def : 53 54
termination_list     : 51 53
termination_section  : 14
type_def             : 20
type_list            : 19 20
type_section         : 10
type_spec            : 36 37 38 39 40 41 42 43 145 146
typed_var            : 129 130
typed_var_list       : 105 106 115 129

Parsing method: LALR

state 0

    (0) S' -> . rddl
    (1) rddl -> . rddl_block
    (2) rddl_block -> . rddl_block domain_block
    (3) rddl_block -> . rddl_block instance_block
    (4) rddl_block -> . rddl_block nonfluent_block
    (5) rddl_block -> . empty
    (207) empty -> .

    DOMAIN          reduce using rule 207 (empty -> .)
    INSTANCE        reduce using rule 207 (empty -> .)
    NON_FLUENTS     reduce using rule 207 (empty -> .)
    $end            reduce using rule 207 (empty -> .)

    rddl                           shift and go to state 1
    rddl_block                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> rddl .



state 2

    (1) rddl -> rddl_block .
    (2) rddl_block -> rddl_block . domain_block
    (3) rddl_block -> rddl_block . instance_block
    (4) rddl_block -> rddl_block . nonfluent_block
    (6) domain_block -> . DOMAIN IDENT LCURLY req_section domain_list RCURLY
    (165) instance_block -> . INSTANCE IDENT LCURLY instance_list RCURLY
    (182) nonfluent_block -> . NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY

    $end            reduce using rule 1 (rddl -> rddl_block .)
    DOMAIN          shift and go to state 7
    INSTANCE        shift and go to state 8
    NON_FLUENTS     shift and go to state 9

    domain_block                   shift and go to state 4
    instance_block                 shift and go to state 5
    nonfluent_block                shift and go to state 6

state 3

    (5) rddl_block -> empty .

    DOMAIN          reduce using rule 5 (rddl_block -> empty .)
    INSTANCE        reduce using rule 5 (rddl_block -> empty .)
    NON_FLUENTS     reduce using rule 5 (rddl_block -> empty .)
    $end            reduce using rule 5 (rddl_block -> empty .)


state 4

    (2) rddl_block -> rddl_block domain_block .

    DOMAIN          reduce using rule 2 (rddl_block -> rddl_block domain_block .)
    INSTANCE        reduce using rule 2 (rddl_block -> rddl_block domain_block .)
    NON_FLUENTS     reduce using rule 2 (rddl_block -> rddl_block domain_block .)
    $end            reduce using rule 2 (rddl_block -> rddl_block domain_block .)


state 5

    (3) rddl_block -> rddl_block instance_block .

    DOMAIN          reduce using rule 3 (rddl_block -> rddl_block instance_block .)
    INSTANCE        reduce using rule 3 (rddl_block -> rddl_block instance_block .)
    NON_FLUENTS     reduce using rule 3 (rddl_block -> rddl_block instance_block .)
    $end            reduce using rule 3 (rddl_block -> rddl_block instance_block .)


state 6

    (4) rddl_block -> rddl_block nonfluent_block .

    DOMAIN          reduce using rule 4 (rddl_block -> rddl_block nonfluent_block .)
    INSTANCE        reduce using rule 4 (rddl_block -> rddl_block nonfluent_block .)
    NON_FLUENTS     reduce using rule 4 (rddl_block -> rddl_block nonfluent_block .)
    $end            reduce using rule 4 (rddl_block -> rddl_block nonfluent_block .)


state 7

    (6) domain_block -> DOMAIN . IDENT LCURLY req_section domain_list RCURLY

    IDENT           shift and go to state 10


state 8

    (165) instance_block -> INSTANCE . IDENT LCURLY instance_list RCURLY

    IDENT           shift and go to state 11


state 9

    (182) nonfluent_block -> NON_FLUENTS . IDENT LCURLY nonfluent_list RCURLY

    IDENT           shift and go to state 12


state 10

    (6) domain_block -> DOMAIN IDENT . LCURLY req_section domain_list RCURLY

    LCURLY          shift and go to state 13


state 11

    (165) instance_block -> INSTANCE IDENT . LCURLY instance_list RCURLY

    LCURLY          shift and go to state 14


state 12

    (182) nonfluent_block -> NON_FLUENTS IDENT . LCURLY nonfluent_list RCURLY

    LCURLY          shift and go to state 15


state 13

    (6) domain_block -> DOMAIN IDENT LCURLY . req_section domain_list RCURLY
    (7) req_section -> . REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI
    (8) req_section -> . REQUIREMENTS LCURLY string_list RCURLY SEMI
    (9) req_section -> . empty
    (207) empty -> .

    REQUIREMENTS    shift and go to state 17
    RCURLY          reduce using rule 207 (empty -> .)
    TYPES           reduce using rule 207 (empty -> .)
    PVARIABLES      reduce using rule 207 (empty -> .)
    REWARD          reduce using rule 207 (empty -> .)
    TERMINATION     reduce using rule 207 (empty -> .)
    ACTION_PRECONDITIONS reduce using rule 207 (empty -> .)
    STATE_ACTION_CONSTRAINTS reduce using rule 207 (empty -> .)
    STATE_INVARIANTS reduce using rule 207 (empty -> .)
    CPFS            reduce using rule 207 (empty -> .)
    CDFS            reduce using rule 207 (empty -> .)

    req_section                    shift and go to state 16
    empty                          shift and go to state 18

state 14

    (165) instance_block -> INSTANCE IDENT LCURLY . instance_list RCURLY
    (166) instance_list -> . instance_list domain_section
    (167) instance_list -> . instance_list nonfluents_section
    (168) instance_list -> . instance_list objects_section
    (169) instance_list -> . instance_list init_state_section
    (170) instance_list -> . instance_list max_nondef_actions_section
    (171) instance_list -> . instance_list horizon_spec_section
    (172) instance_list -> . instance_list discount_section
    (173) instance_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    DOMAIN          reduce using rule 207 (empty -> .)
    NON_FLUENTS     reduce using rule 207 (empty -> .)
    OBJECTS         reduce using rule 207 (empty -> .)
    INIT_STATE      reduce using rule 207 (empty -> .)
    MAX_NONDEF_ACTIONS reduce using rule 207 (empty -> .)
    HORIZON         reduce using rule 207 (empty -> .)
    DISCOUNT        reduce using rule 207 (empty -> .)

    instance_list                  shift and go to state 19
    empty                          shift and go to state 20

state 15

    (182) nonfluent_block -> NON_FLUENTS IDENT LCURLY . nonfluent_list RCURLY
    (183) nonfluent_list -> . nonfluent_list domain_section
    (184) nonfluent_list -> . nonfluent_list objects_section
    (185) nonfluent_list -> . nonfluent_list init_non_fluent_section
    (186) nonfluent_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    DOMAIN          reduce using rule 207 (empty -> .)
    OBJECTS         reduce using rule 207 (empty -> .)
    NON_FLUENTS     reduce using rule 207 (empty -> .)

    nonfluent_list                 shift and go to state 21
    empty                          shift and go to state 22

state 16

    (6) domain_block -> DOMAIN IDENT LCURLY req_section . domain_list RCURLY
    (10) domain_list -> . domain_list type_section
    (11) domain_list -> . domain_list pvar_section
    (12) domain_list -> . domain_list cpf_section
    (13) domain_list -> . domain_list reward_section
    (14) domain_list -> . domain_list termination_section
    (15) domain_list -> . domain_list action_precond_section
    (16) domain_list -> . domain_list state_action_constraint_section
    (17) domain_list -> . domain_list state_invariant_section
    (18) domain_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    TYPES           reduce using rule 207 (empty -> .)
    PVARIABLES      reduce using rule 207 (empty -> .)
    REWARD          reduce using rule 207 (empty -> .)
    TERMINATION     reduce using rule 207 (empty -> .)
    ACTION_PRECONDITIONS reduce using rule 207 (empty -> .)
    STATE_ACTION_CONSTRAINTS reduce using rule 207 (empty -> .)
    STATE_INVARIANTS reduce using rule 207 (empty -> .)
    CPFS            reduce using rule 207 (empty -> .)
    CDFS            reduce using rule 207 (empty -> .)

    domain_list                    shift and go to state 23
    empty                          shift and go to state 24

state 17

    (7) req_section -> REQUIREMENTS . ASSIGN_EQUAL LCURLY string_list RCURLY SEMI
    (8) req_section -> REQUIREMENTS . LCURLY string_list RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 25
    LCURLY          shift and go to state 26


state 18

    (9) req_section -> empty .

    RCURLY          reduce using rule 9 (req_section -> empty .)
    TYPES           reduce using rule 9 (req_section -> empty .)
    PVARIABLES      reduce using rule 9 (req_section -> empty .)
    REWARD          reduce using rule 9 (req_section -> empty .)
    TERMINATION     reduce using rule 9 (req_section -> empty .)
    ACTION_PRECONDITIONS reduce using rule 9 (req_section -> empty .)
    STATE_ACTION_CONSTRAINTS reduce using rule 9 (req_section -> empty .)
    STATE_INVARIANTS reduce using rule 9 (req_section -> empty .)
    CPFS            reduce using rule 9 (req_section -> empty .)
    CDFS            reduce using rule 9 (req_section -> empty .)


state 19

    (165) instance_block -> INSTANCE IDENT LCURLY instance_list . RCURLY
    (166) instance_list -> instance_list . domain_section
    (167) instance_list -> instance_list . nonfluents_section
    (168) instance_list -> instance_list . objects_section
    (169) instance_list -> instance_list . init_state_section
    (170) instance_list -> instance_list . max_nondef_actions_section
    (171) instance_list -> instance_list . horizon_spec_section
    (172) instance_list -> instance_list . discount_section
    (174) domain_section -> . DOMAIN ASSIGN_EQUAL IDENT SEMI
    (175) nonfluents_section -> . NON_FLUENTS ASSIGN_EQUAL IDENT SEMI
    (176) objects_section -> . OBJECTS LCURLY objects_list RCURLY SEMI
    (177) init_state_section -> . INIT_STATE LCURLY pvar_inst_list RCURLY SEMI
    (178) max_nondef_actions_section -> . MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI
    (179) horizon_spec_section -> . HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI
    (180) horizon_spec_section -> . HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN
    (181) discount_section -> . DISCOUNT ASSIGN_EQUAL DOUBLE SEMI

    RCURLY          shift and go to state 27
    DOMAIN          shift and go to state 35
    NON_FLUENTS     shift and go to state 36
    OBJECTS         shift and go to state 37
    INIT_STATE      shift and go to state 38
    MAX_NONDEF_ACTIONS shift and go to state 39
    HORIZON         shift and go to state 40
    DISCOUNT        shift and go to state 41

    domain_section                 shift and go to state 28
    nonfluents_section             shift and go to state 29
    objects_section                shift and go to state 30
    init_state_section             shift and go to state 31
    max_nondef_actions_section     shift and go to state 32
    horizon_spec_section           shift and go to state 33
    discount_section               shift and go to state 34

state 20

    (173) instance_list -> empty .

    RCURLY          reduce using rule 173 (instance_list -> empty .)
    DOMAIN          reduce using rule 173 (instance_list -> empty .)
    NON_FLUENTS     reduce using rule 173 (instance_list -> empty .)
    OBJECTS         reduce using rule 173 (instance_list -> empty .)
    INIT_STATE      reduce using rule 173 (instance_list -> empty .)
    MAX_NONDEF_ACTIONS reduce using rule 173 (instance_list -> empty .)
    HORIZON         reduce using rule 173 (instance_list -> empty .)
    DISCOUNT        reduce using rule 173 (instance_list -> empty .)


state 21

    (182) nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list . RCURLY
    (183) nonfluent_list -> nonfluent_list . domain_section
    (184) nonfluent_list -> nonfluent_list . objects_section
    (185) nonfluent_list -> nonfluent_list . init_non_fluent_section
    (174) domain_section -> . DOMAIN ASSIGN_EQUAL IDENT SEMI
    (176) objects_section -> . OBJECTS LCURLY objects_list RCURLY SEMI
    (187) init_non_fluent_section -> . NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI

    RCURLY          shift and go to state 43
    DOMAIN          shift and go to state 35
    OBJECTS         shift and go to state 37
    NON_FLUENTS     shift and go to state 42

    domain_section                 shift and go to state 44
    objects_section                shift and go to state 45
    init_non_fluent_section        shift and go to state 46

state 22

    (186) nonfluent_list -> empty .

    RCURLY          reduce using rule 186 (nonfluent_list -> empty .)
    DOMAIN          reduce using rule 186 (nonfluent_list -> empty .)
    OBJECTS         reduce using rule 186 (nonfluent_list -> empty .)
    NON_FLUENTS     reduce using rule 186 (nonfluent_list -> empty .)


state 23

    (6) domain_block -> DOMAIN IDENT LCURLY req_section domain_list . RCURLY
    (10) domain_list -> domain_list . type_section
    (11) domain_list -> domain_list . pvar_section
    (12) domain_list -> domain_list . cpf_section
    (13) domain_list -> domain_list . reward_section
    (14) domain_list -> domain_list . termination_section
    (15) domain_list -> domain_list . action_precond_section
    (16) domain_list -> domain_list . state_action_constraint_section
    (17) domain_list -> domain_list . state_invariant_section
    (19) type_section -> . TYPES LCURLY type_list RCURLY SEMI
    (27) pvar_section -> . PVARIABLES LCURLY pvar_list RCURLY SEMI
    (44) cpf_section -> . cpf_header LCURLY cpf_list RCURLY SEMI
    (50) reward_section -> . REWARD ASSIGN_EQUAL expr SEMI
    (51) termination_section -> . TERMINATION LCURLY termination_list RCURLY SEMI
    (52) termination_section -> . TERMINATION LCURLY RCURLY SEMI
    (56) action_precond_section -> . ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI
    (57) action_precond_section -> . ACTION_PRECONDITIONS LCURLY RCURLY SEMI
    (61) state_action_constraint_section -> . STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI
    (62) state_action_constraint_section -> . STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI
    (66) state_invariant_section -> . STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI
    (67) state_invariant_section -> . STATE_INVARIANTS LCURLY RCURLY SEMI
    (45) cpf_header -> . CPFS
    (46) cpf_header -> . CDFS

    RCURLY          shift and go to state 47
    TYPES           shift and go to state 56
    PVARIABLES      shift and go to state 57
    REWARD          shift and go to state 59
    TERMINATION     shift and go to state 60
    ACTION_PRECONDITIONS shift and go to state 61
    STATE_ACTION_CONSTRAINTS shift and go to state 62
    STATE_INVARIANTS shift and go to state 63
    CPFS            shift and go to state 64
    CDFS            shift and go to state 65

    type_section                   shift and go to state 48
    pvar_section                   shift and go to state 49
    cpf_section                    shift and go to state 50
    reward_section                 shift and go to state 51
    termination_section            shift and go to state 52
    action_precond_section         shift and go to state 53
    state_action_constraint_section shift and go to state 54
    state_invariant_section        shift and go to state 55
    cpf_header                     shift and go to state 58

state 24

    (18) domain_list -> empty .

    RCURLY          reduce using rule 18 (domain_list -> empty .)
    TYPES           reduce using rule 18 (domain_list -> empty .)
    PVARIABLES      reduce using rule 18 (domain_list -> empty .)
    REWARD          reduce using rule 18 (domain_list -> empty .)
    TERMINATION     reduce using rule 18 (domain_list -> empty .)
    ACTION_PRECONDITIONS reduce using rule 18 (domain_list -> empty .)
    STATE_ACTION_CONSTRAINTS reduce using rule 18 (domain_list -> empty .)
    STATE_INVARIANTS reduce using rule 18 (domain_list -> empty .)
    CPFS            reduce using rule 18 (domain_list -> empty .)
    CDFS            reduce using rule 18 (domain_list -> empty .)


state 25

    (7) req_section -> REQUIREMENTS ASSIGN_EQUAL . LCURLY string_list RCURLY SEMI

    LCURLY          shift and go to state 66


state 26

    (8) req_section -> REQUIREMENTS LCURLY . string_list RCURLY SEMI
    (204) string_list -> . string_list COMMA IDENT
    (205) string_list -> . IDENT
    (206) string_list -> . empty
    (207) empty -> .

    IDENT           shift and go to state 68
    RCURLY          reduce using rule 207 (empty -> .)
    COMMA           reduce using rule 207 (empty -> .)

    string_list                    shift and go to state 67
    empty                          shift and go to state 69

state 27

    (165) instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY .

    DOMAIN          reduce using rule 165 (instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY .)
    INSTANCE        reduce using rule 165 (instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY .)
    NON_FLUENTS     reduce using rule 165 (instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY .)
    $end            reduce using rule 165 (instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY .)


state 28

    (166) instance_list -> instance_list domain_section .

    RCURLY          reduce using rule 166 (instance_list -> instance_list domain_section .)
    DOMAIN          reduce using rule 166 (instance_list -> instance_list domain_section .)
    NON_FLUENTS     reduce using rule 166 (instance_list -> instance_list domain_section .)
    OBJECTS         reduce using rule 166 (instance_list -> instance_list domain_section .)
    INIT_STATE      reduce using rule 166 (instance_list -> instance_list domain_section .)
    MAX_NONDEF_ACTIONS reduce using rule 166 (instance_list -> instance_list domain_section .)
    HORIZON         reduce using rule 166 (instance_list -> instance_list domain_section .)
    DISCOUNT        reduce using rule 166 (instance_list -> instance_list domain_section .)


state 29

    (167) instance_list -> instance_list nonfluents_section .

    RCURLY          reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    DOMAIN          reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    NON_FLUENTS     reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    OBJECTS         reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    INIT_STATE      reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    MAX_NONDEF_ACTIONS reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    HORIZON         reduce using rule 167 (instance_list -> instance_list nonfluents_section .)
    DISCOUNT        reduce using rule 167 (instance_list -> instance_list nonfluents_section .)


state 30

    (168) instance_list -> instance_list objects_section .

    RCURLY          reduce using rule 168 (instance_list -> instance_list objects_section .)
    DOMAIN          reduce using rule 168 (instance_list -> instance_list objects_section .)
    NON_FLUENTS     reduce using rule 168 (instance_list -> instance_list objects_section .)
    OBJECTS         reduce using rule 168 (instance_list -> instance_list objects_section .)
    INIT_STATE      reduce using rule 168 (instance_list -> instance_list objects_section .)
    MAX_NONDEF_ACTIONS reduce using rule 168 (instance_list -> instance_list objects_section .)
    HORIZON         reduce using rule 168 (instance_list -> instance_list objects_section .)
    DISCOUNT        reduce using rule 168 (instance_list -> instance_list objects_section .)


state 31

    (169) instance_list -> instance_list init_state_section .

    RCURLY          reduce using rule 169 (instance_list -> instance_list init_state_section .)
    DOMAIN          reduce using rule 169 (instance_list -> instance_list init_state_section .)
    NON_FLUENTS     reduce using rule 169 (instance_list -> instance_list init_state_section .)
    OBJECTS         reduce using rule 169 (instance_list -> instance_list init_state_section .)
    INIT_STATE      reduce using rule 169 (instance_list -> instance_list init_state_section .)
    MAX_NONDEF_ACTIONS reduce using rule 169 (instance_list -> instance_list init_state_section .)
    HORIZON         reduce using rule 169 (instance_list -> instance_list init_state_section .)
    DISCOUNT        reduce using rule 169 (instance_list -> instance_list init_state_section .)


state 32

    (170) instance_list -> instance_list max_nondef_actions_section .

    RCURLY          reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    DOMAIN          reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    NON_FLUENTS     reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    OBJECTS         reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    INIT_STATE      reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    MAX_NONDEF_ACTIONS reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    HORIZON         reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)
    DISCOUNT        reduce using rule 170 (instance_list -> instance_list max_nondef_actions_section .)


state 33

    (171) instance_list -> instance_list horizon_spec_section .

    RCURLY          reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    DOMAIN          reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    NON_FLUENTS     reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    OBJECTS         reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    INIT_STATE      reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    MAX_NONDEF_ACTIONS reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    HORIZON         reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)
    DISCOUNT        reduce using rule 171 (instance_list -> instance_list horizon_spec_section .)


state 34

    (172) instance_list -> instance_list discount_section .

    RCURLY          reduce using rule 172 (instance_list -> instance_list discount_section .)
    DOMAIN          reduce using rule 172 (instance_list -> instance_list discount_section .)
    NON_FLUENTS     reduce using rule 172 (instance_list -> instance_list discount_section .)
    OBJECTS         reduce using rule 172 (instance_list -> instance_list discount_section .)
    INIT_STATE      reduce using rule 172 (instance_list -> instance_list discount_section .)
    MAX_NONDEF_ACTIONS reduce using rule 172 (instance_list -> instance_list discount_section .)
    HORIZON         reduce using rule 172 (instance_list -> instance_list discount_section .)
    DISCOUNT        reduce using rule 172 (instance_list -> instance_list discount_section .)


state 35

    (174) domain_section -> DOMAIN . ASSIGN_EQUAL IDENT SEMI

    ASSIGN_EQUAL    shift and go to state 70


state 36

    (175) nonfluents_section -> NON_FLUENTS . ASSIGN_EQUAL IDENT SEMI

    ASSIGN_EQUAL    shift and go to state 71


state 37

    (176) objects_section -> OBJECTS . LCURLY objects_list RCURLY SEMI

    LCURLY          shift and go to state 72


state 38

    (177) init_state_section -> INIT_STATE . LCURLY pvar_inst_list RCURLY SEMI

    LCURLY          shift and go to state 73


state 39

    (178) max_nondef_actions_section -> MAX_NONDEF_ACTIONS . ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI

    ASSIGN_EQUAL    shift and go to state 74


state 40

    (179) horizon_spec_section -> HORIZON . ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI
    (180) horizon_spec_section -> HORIZON . ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN

    ASSIGN_EQUAL    shift and go to state 75


state 41

    (181) discount_section -> DISCOUNT . ASSIGN_EQUAL DOUBLE SEMI

    ASSIGN_EQUAL    shift and go to state 76


state 42

    (187) init_non_fluent_section -> NON_FLUENTS . LCURLY pvar_inst_list RCURLY SEMI

    LCURLY          shift and go to state 77


state 43

    (182) nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY .

    DOMAIN          reduce using rule 182 (nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY .)
    INSTANCE        reduce using rule 182 (nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY .)
    NON_FLUENTS     reduce using rule 182 (nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY .)
    $end            reduce using rule 182 (nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY .)


state 44

    (183) nonfluent_list -> nonfluent_list domain_section .

    RCURLY          reduce using rule 183 (nonfluent_list -> nonfluent_list domain_section .)
    DOMAIN          reduce using rule 183 (nonfluent_list -> nonfluent_list domain_section .)
    OBJECTS         reduce using rule 183 (nonfluent_list -> nonfluent_list domain_section .)
    NON_FLUENTS     reduce using rule 183 (nonfluent_list -> nonfluent_list domain_section .)


state 45

    (184) nonfluent_list -> nonfluent_list objects_section .

    RCURLY          reduce using rule 184 (nonfluent_list -> nonfluent_list objects_section .)
    DOMAIN          reduce using rule 184 (nonfluent_list -> nonfluent_list objects_section .)
    OBJECTS         reduce using rule 184 (nonfluent_list -> nonfluent_list objects_section .)
    NON_FLUENTS     reduce using rule 184 (nonfluent_list -> nonfluent_list objects_section .)


state 46

    (185) nonfluent_list -> nonfluent_list init_non_fluent_section .

    RCURLY          reduce using rule 185 (nonfluent_list -> nonfluent_list init_non_fluent_section .)
    DOMAIN          reduce using rule 185 (nonfluent_list -> nonfluent_list init_non_fluent_section .)
    OBJECTS         reduce using rule 185 (nonfluent_list -> nonfluent_list init_non_fluent_section .)
    NON_FLUENTS     reduce using rule 185 (nonfluent_list -> nonfluent_list init_non_fluent_section .)


state 47

    (6) domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY .

    DOMAIN          reduce using rule 6 (domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY .)
    INSTANCE        reduce using rule 6 (domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY .)
    NON_FLUENTS     reduce using rule 6 (domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY .)
    $end            reduce using rule 6 (domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY .)


state 48

    (10) domain_list -> domain_list type_section .

    RCURLY          reduce using rule 10 (domain_list -> domain_list type_section .)
    TYPES           reduce using rule 10 (domain_list -> domain_list type_section .)
    PVARIABLES      reduce using rule 10 (domain_list -> domain_list type_section .)
    REWARD          reduce using rule 10 (domain_list -> domain_list type_section .)
    TERMINATION     reduce using rule 10 (domain_list -> domain_list type_section .)
    ACTION_PRECONDITIONS reduce using rule 10 (domain_list -> domain_list type_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 10 (domain_list -> domain_list type_section .)
    STATE_INVARIANTS reduce using rule 10 (domain_list -> domain_list type_section .)
    CPFS            reduce using rule 10 (domain_list -> domain_list type_section .)
    CDFS            reduce using rule 10 (domain_list -> domain_list type_section .)


state 49

    (11) domain_list -> domain_list pvar_section .

    RCURLY          reduce using rule 11 (domain_list -> domain_list pvar_section .)
    TYPES           reduce using rule 11 (domain_list -> domain_list pvar_section .)
    PVARIABLES      reduce using rule 11 (domain_list -> domain_list pvar_section .)
    REWARD          reduce using rule 11 (domain_list -> domain_list pvar_section .)
    TERMINATION     reduce using rule 11 (domain_list -> domain_list pvar_section .)
    ACTION_PRECONDITIONS reduce using rule 11 (domain_list -> domain_list pvar_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 11 (domain_list -> domain_list pvar_section .)
    STATE_INVARIANTS reduce using rule 11 (domain_list -> domain_list pvar_section .)
    CPFS            reduce using rule 11 (domain_list -> domain_list pvar_section .)
    CDFS            reduce using rule 11 (domain_list -> domain_list pvar_section .)


state 50

    (12) domain_list -> domain_list cpf_section .

    RCURLY          reduce using rule 12 (domain_list -> domain_list cpf_section .)
    TYPES           reduce using rule 12 (domain_list -> domain_list cpf_section .)
    PVARIABLES      reduce using rule 12 (domain_list -> domain_list cpf_section .)
    REWARD          reduce using rule 12 (domain_list -> domain_list cpf_section .)
    TERMINATION     reduce using rule 12 (domain_list -> domain_list cpf_section .)
    ACTION_PRECONDITIONS reduce using rule 12 (domain_list -> domain_list cpf_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 12 (domain_list -> domain_list cpf_section .)
    STATE_INVARIANTS reduce using rule 12 (domain_list -> domain_list cpf_section .)
    CPFS            reduce using rule 12 (domain_list -> domain_list cpf_section .)
    CDFS            reduce using rule 12 (domain_list -> domain_list cpf_section .)


state 51

    (13) domain_list -> domain_list reward_section .

    RCURLY          reduce using rule 13 (domain_list -> domain_list reward_section .)
    TYPES           reduce using rule 13 (domain_list -> domain_list reward_section .)
    PVARIABLES      reduce using rule 13 (domain_list -> domain_list reward_section .)
    REWARD          reduce using rule 13 (domain_list -> domain_list reward_section .)
    TERMINATION     reduce using rule 13 (domain_list -> domain_list reward_section .)
    ACTION_PRECONDITIONS reduce using rule 13 (domain_list -> domain_list reward_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 13 (domain_list -> domain_list reward_section .)
    STATE_INVARIANTS reduce using rule 13 (domain_list -> domain_list reward_section .)
    CPFS            reduce using rule 13 (domain_list -> domain_list reward_section .)
    CDFS            reduce using rule 13 (domain_list -> domain_list reward_section .)


state 52

    (14) domain_list -> domain_list termination_section .

    RCURLY          reduce using rule 14 (domain_list -> domain_list termination_section .)
    TYPES           reduce using rule 14 (domain_list -> domain_list termination_section .)
    PVARIABLES      reduce using rule 14 (domain_list -> domain_list termination_section .)
    REWARD          reduce using rule 14 (domain_list -> domain_list termination_section .)
    TERMINATION     reduce using rule 14 (domain_list -> domain_list termination_section .)
    ACTION_PRECONDITIONS reduce using rule 14 (domain_list -> domain_list termination_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 14 (domain_list -> domain_list termination_section .)
    STATE_INVARIANTS reduce using rule 14 (domain_list -> domain_list termination_section .)
    CPFS            reduce using rule 14 (domain_list -> domain_list termination_section .)
    CDFS            reduce using rule 14 (domain_list -> domain_list termination_section .)


state 53

    (15) domain_list -> domain_list action_precond_section .

    RCURLY          reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    TYPES           reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    PVARIABLES      reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    REWARD          reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    TERMINATION     reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    ACTION_PRECONDITIONS reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    STATE_INVARIANTS reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    CPFS            reduce using rule 15 (domain_list -> domain_list action_precond_section .)
    CDFS            reduce using rule 15 (domain_list -> domain_list action_precond_section .)


state 54

    (16) domain_list -> domain_list state_action_constraint_section .

    RCURLY          reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    TYPES           reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    PVARIABLES      reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    REWARD          reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    TERMINATION     reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    ACTION_PRECONDITIONS reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    STATE_INVARIANTS reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    CPFS            reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)
    CDFS            reduce using rule 16 (domain_list -> domain_list state_action_constraint_section .)


state 55

    (17) domain_list -> domain_list state_invariant_section .

    RCURLY          reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    TYPES           reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    PVARIABLES      reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    REWARD          reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    TERMINATION     reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    ACTION_PRECONDITIONS reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    STATE_ACTION_CONSTRAINTS reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    STATE_INVARIANTS reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    CPFS            reduce using rule 17 (domain_list -> domain_list state_invariant_section .)
    CDFS            reduce using rule 17 (domain_list -> domain_list state_invariant_section .)


state 56

    (19) type_section -> TYPES . LCURLY type_list RCURLY SEMI

    LCURLY          shift and go to state 78


state 57

    (27) pvar_section -> PVARIABLES . LCURLY pvar_list RCURLY SEMI

    LCURLY          shift and go to state 79


state 58

    (44) cpf_section -> cpf_header . LCURLY cpf_list RCURLY SEMI

    LCURLY          shift and go to state 80


state 59

    (50) reward_section -> REWARD . ASSIGN_EQUAL expr SEMI

    ASSIGN_EQUAL    shift and go to state 81


state 60

    (51) termination_section -> TERMINATION . LCURLY termination_list RCURLY SEMI
    (52) termination_section -> TERMINATION . LCURLY RCURLY SEMI

    LCURLY          shift and go to state 82


state 61

    (56) action_precond_section -> ACTION_PRECONDITIONS . LCURLY action_precond_list RCURLY SEMI
    (57) action_precond_section -> ACTION_PRECONDITIONS . LCURLY RCURLY SEMI

    LCURLY          shift and go to state 83


state 62

    (61) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS . LCURLY state_cons_list RCURLY SEMI
    (62) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS . LCURLY RCURLY SEMI

    LCURLY          shift and go to state 84


state 63

    (66) state_invariant_section -> STATE_INVARIANTS . LCURLY state_invariant_list RCURLY SEMI
    (67) state_invariant_section -> STATE_INVARIANTS . LCURLY RCURLY SEMI

    LCURLY          shift and go to state 85


state 64

    (45) cpf_header -> CPFS .

    LCURLY          reduce using rule 45 (cpf_header -> CPFS .)


state 65

    (46) cpf_header -> CDFS .

    LCURLY          reduce using rule 46 (cpf_header -> CDFS .)


state 66

    (7) req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY . string_list RCURLY SEMI
    (204) string_list -> . string_list COMMA IDENT
    (205) string_list -> . IDENT
    (206) string_list -> . empty
    (207) empty -> .

    IDENT           shift and go to state 68
    RCURLY          reduce using rule 207 (empty -> .)
    COMMA           reduce using rule 207 (empty -> .)

    string_list                    shift and go to state 86
    empty                          shift and go to state 69

state 67

    (8) req_section -> REQUIREMENTS LCURLY string_list . RCURLY SEMI
    (204) string_list -> string_list . COMMA IDENT

    RCURLY          shift and go to state 87
    COMMA           shift and go to state 88


state 68

    (205) string_list -> IDENT .

    RCURLY          reduce using rule 205 (string_list -> IDENT .)
    COMMA           reduce using rule 205 (string_list -> IDENT .)


state 69

    (206) string_list -> empty .

    RCURLY          reduce using rule 206 (string_list -> empty .)
    COMMA           reduce using rule 206 (string_list -> empty .)


state 70

    (174) domain_section -> DOMAIN ASSIGN_EQUAL . IDENT SEMI

    IDENT           shift and go to state 89


state 71

    (175) nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL . IDENT SEMI

    IDENT           shift and go to state 90


state 72

    (176) objects_section -> OBJECTS LCURLY . objects_list RCURLY SEMI
    (188) objects_list -> . objects_list objects_def
    (189) objects_list -> . objects_def
    (190) objects_list -> . empty
    (191) objects_def -> . IDENT COLON LCURLY object_const_list RCURLY SEMI
    (207) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 94
    RCURLY          reduce using rule 207 (empty -> .)

  ! IDENT           [ reduce using rule 207 (empty -> .) ]

    objects_list                   shift and go to state 91
    objects_def                    shift and go to state 92
    empty                          shift and go to state 93

state 73

    (177) init_state_section -> INIT_STATE LCURLY . pvar_inst_list RCURLY SEMI
    (194) pvar_inst_list -> . pvar_inst_list pvar_inst_def
    (195) pvar_inst_list -> . pvar_inst_def
    (196) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN SEMI
    (197) pvar_inst_def -> . IDENT SEMI
    (198) pvar_inst_def -> . NOT IDENT LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> . NOT IDENT SEMI
    (200) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (201) pvar_inst_def -> . IDENT ASSIGN_EQUAL range_const SEMI

    IDENT           shift and go to state 97
    NOT             shift and go to state 98

    pvar_inst_list                 shift and go to state 95
    pvar_inst_def                  shift and go to state 96

state 74

    (178) max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL . pos_int_type_or_pos_inf SEMI
    (163) pos_int_type_or_pos_inf -> . INTEGER
    (164) pos_int_type_or_pos_inf -> . POS_INF

    INTEGER         shift and go to state 100
    POS_INF         shift and go to state 101

    pos_int_type_or_pos_inf        shift and go to state 99

state 75

    (179) horizon_spec_section -> HORIZON ASSIGN_EQUAL . pos_int_type_or_pos_inf SEMI
    (180) horizon_spec_section -> HORIZON ASSIGN_EQUAL . TERMINATE_WHEN LPAREN expr RPAREN
    (163) pos_int_type_or_pos_inf -> . INTEGER
    (164) pos_int_type_or_pos_inf -> . POS_INF

    TERMINATE_WHEN  shift and go to state 103
    INTEGER         shift and go to state 100
    POS_INF         shift and go to state 101

    pos_int_type_or_pos_inf        shift and go to state 102

state 76

    (181) discount_section -> DISCOUNT ASSIGN_EQUAL . DOUBLE SEMI

    DOUBLE          shift and go to state 104


state 77

    (187) init_non_fluent_section -> NON_FLUENTS LCURLY . pvar_inst_list RCURLY SEMI
    (194) pvar_inst_list -> . pvar_inst_list pvar_inst_def
    (195) pvar_inst_list -> . pvar_inst_def
    (196) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN SEMI
    (197) pvar_inst_def -> . IDENT SEMI
    (198) pvar_inst_def -> . NOT IDENT LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> . NOT IDENT SEMI
    (200) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (201) pvar_inst_def -> . IDENT ASSIGN_EQUAL range_const SEMI

    IDENT           shift and go to state 97
    NOT             shift and go to state 98

    pvar_inst_list                 shift and go to state 105
    pvar_inst_def                  shift and go to state 96

state 78

    (19) type_section -> TYPES LCURLY . type_list RCURLY SEMI
    (20) type_list -> . type_list type_def
    (21) type_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    IDENT           reduce using rule 207 (empty -> .)

    type_list                      shift and go to state 106
    empty                          shift and go to state 107

state 79

    (27) pvar_section -> PVARIABLES LCURLY . pvar_list RCURLY SEMI
    (28) pvar_list -> . pvar_list pvar_def
    (29) pvar_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    IDENT           reduce using rule 207 (empty -> .)

    pvar_list                      shift and go to state 108
    empty                          shift and go to state 109

state 80

    (44) cpf_section -> cpf_header LCURLY . cpf_list RCURLY SEMI
    (47) cpf_list -> . cpf_list cpf_def
    (48) cpf_list -> . empty
    (207) empty -> .

    RCURLY          reduce using rule 207 (empty -> .)
    IDENT           reduce using rule 207 (empty -> .)

    cpf_list                       shift and go to state 110
    empty                          shift and go to state 111

state 81

    (50) reward_section -> REWARD ASSIGN_EQUAL . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 112
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 82

    (51) termination_section -> TERMINATION LCURLY . termination_list RCURLY SEMI
    (52) termination_section -> TERMINATION LCURLY . RCURLY SEMI
    (53) termination_list -> . termination_list termination_cond_def
    (54) termination_list -> . termination_cond_def
    (55) termination_cond_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 150
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    termination_list               shift and go to state 149
    termination_cond_def           shift and go to state 151
    expr                           shift and go to state 152
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 83

    (56) action_precond_section -> ACTION_PRECONDITIONS LCURLY . action_precond_list RCURLY SEMI
    (57) action_precond_section -> ACTION_PRECONDITIONS LCURLY . RCURLY SEMI
    (58) action_precond_list -> . action_precond_list action_precond_def
    (59) action_precond_list -> . action_precond_def
    (60) action_precond_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 154
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    action_precond_list            shift and go to state 153
    action_precond_def             shift and go to state 155
    expr                           shift and go to state 156
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 84

    (61) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY . state_cons_list RCURLY SEMI
    (62) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY . RCURLY SEMI
    (63) state_cons_list -> . state_cons_list state_cons_def
    (64) state_cons_list -> . state_cons_def
    (65) state_cons_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 158
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    state_cons_list                shift and go to state 157
    state_cons_def                 shift and go to state 159
    expr                           shift and go to state 160
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 85

    (66) state_invariant_section -> STATE_INVARIANTS LCURLY . state_invariant_list RCURLY SEMI
    (67) state_invariant_section -> STATE_INVARIANTS LCURLY . RCURLY SEMI
    (68) state_invariant_list -> . state_invariant_list state_invariant_def
    (69) state_invariant_list -> . state_invariant_def
    (70) state_invariant_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 162
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    state_invariant_list           shift and go to state 161
    state_invariant_def            shift and go to state 163
    expr                           shift and go to state 164
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 86

    (7) req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list . RCURLY SEMI
    (204) string_list -> string_list . COMMA IDENT

    RCURLY          shift and go to state 165
    COMMA           shift and go to state 88


state 87

    (8) req_section -> REQUIREMENTS LCURLY string_list RCURLY . SEMI

    SEMI            shift and go to state 166


state 88

    (204) string_list -> string_list COMMA . IDENT

    IDENT           shift and go to state 167


state 89

    (174) domain_section -> DOMAIN ASSIGN_EQUAL IDENT . SEMI

    SEMI            shift and go to state 168


state 90

    (175) nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT . SEMI

    SEMI            shift and go to state 169


state 91

    (176) objects_section -> OBJECTS LCURLY objects_list . RCURLY SEMI
    (188) objects_list -> objects_list . objects_def
    (191) objects_def -> . IDENT COLON LCURLY object_const_list RCURLY SEMI

    RCURLY          shift and go to state 170
    IDENT           shift and go to state 94

    objects_def                    shift and go to state 171

state 92

    (189) objects_list -> objects_def .

    RCURLY          reduce using rule 189 (objects_list -> objects_def .)
    IDENT           reduce using rule 189 (objects_list -> objects_def .)


state 93

    (190) objects_list -> empty .

    RCURLY          reduce using rule 190 (objects_list -> empty .)
    IDENT           reduce using rule 190 (objects_list -> empty .)


state 94

    (191) objects_def -> IDENT . COLON LCURLY object_const_list RCURLY SEMI

    COLON           shift and go to state 172


state 95

    (177) init_state_section -> INIT_STATE LCURLY pvar_inst_list . RCURLY SEMI
    (194) pvar_inst_list -> pvar_inst_list . pvar_inst_def
    (196) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN SEMI
    (197) pvar_inst_def -> . IDENT SEMI
    (198) pvar_inst_def -> . NOT IDENT LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> . NOT IDENT SEMI
    (200) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (201) pvar_inst_def -> . IDENT ASSIGN_EQUAL range_const SEMI

    RCURLY          shift and go to state 173
    IDENT           shift and go to state 97
    NOT             shift and go to state 98

    pvar_inst_def                  shift and go to state 174

state 96

    (195) pvar_inst_list -> pvar_inst_def .

    RCURLY          reduce using rule 195 (pvar_inst_list -> pvar_inst_def .)
    IDENT           reduce using rule 195 (pvar_inst_list -> pvar_inst_def .)
    NOT             reduce using rule 195 (pvar_inst_list -> pvar_inst_def .)


state 97

    (196) pvar_inst_def -> IDENT . LPAREN lconst_list RPAREN SEMI
    (197) pvar_inst_def -> IDENT . SEMI
    (200) pvar_inst_def -> IDENT . LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (201) pvar_inst_def -> IDENT . ASSIGN_EQUAL range_const SEMI

    LPAREN          shift and go to state 175
    SEMI            shift and go to state 176
    ASSIGN_EQUAL    shift and go to state 177


state 98

    (198) pvar_inst_def -> NOT . IDENT LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> NOT . IDENT SEMI

    IDENT           shift and go to state 178


state 99

    (178) max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf . SEMI

    SEMI            shift and go to state 179


state 100

    (163) pos_int_type_or_pos_inf -> INTEGER .

    SEMI            reduce using rule 163 (pos_int_type_or_pos_inf -> INTEGER .)


state 101

    (164) pos_int_type_or_pos_inf -> POS_INF .

    SEMI            reduce using rule 164 (pos_int_type_or_pos_inf -> POS_INF .)


state 102

    (179) horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf . SEMI

    SEMI            shift and go to state 180


state 103

    (180) horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN . LPAREN expr RPAREN

    LPAREN          shift and go to state 181


state 104

    (181) discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE . SEMI

    SEMI            shift and go to state 182


state 105

    (187) init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list . RCURLY SEMI
    (194) pvar_inst_list -> pvar_inst_list . pvar_inst_def
    (196) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN SEMI
    (197) pvar_inst_def -> . IDENT SEMI
    (198) pvar_inst_def -> . NOT IDENT LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> . NOT IDENT SEMI
    (200) pvar_inst_def -> . IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (201) pvar_inst_def -> . IDENT ASSIGN_EQUAL range_const SEMI

    RCURLY          shift and go to state 183
    IDENT           shift and go to state 97
    NOT             shift and go to state 98

    pvar_inst_def                  shift and go to state 174

state 106

    (19) type_section -> TYPES LCURLY type_list . RCURLY SEMI
    (20) type_list -> type_list . type_def
    (22) type_def -> . IDENT COLON OBJECT SEMI
    (23) type_def -> . IDENT COLON LCURLY enum_list RCURLY SEMI

    RCURLY          shift and go to state 184
    IDENT           shift and go to state 186

    type_def                       shift and go to state 185

state 107

    (21) type_list -> empty .

    RCURLY          reduce using rule 21 (type_list -> empty .)
    IDENT           reduce using rule 21 (type_list -> empty .)


state 108

    (27) pvar_section -> PVARIABLES LCURLY pvar_list . RCURLY SEMI
    (28) pvar_list -> pvar_list . pvar_def
    (30) pvar_def -> . nonfluent_def
    (31) pvar_def -> . statefluent_def
    (32) pvar_def -> . actionfluent_def
    (33) pvar_def -> . intermfluent_def
    (34) pvar_def -> . derivedfluent_def
    (35) pvar_def -> . observfluent_def
    (36) nonfluent_def -> . IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (37) statefluent_def -> . IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (38) actionfluent_def -> . IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (39) intermfluent_def -> . IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> . IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI
    (41) derivedfluent_def -> . IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> . IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI
    (43) observfluent_def -> . IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI

    RCURLY          shift and go to state 187
    IDENT           shift and go to state 195

    pvar_def                       shift and go to state 188
    nonfluent_def                  shift and go to state 189
    statefluent_def                shift and go to state 190
    actionfluent_def               shift and go to state 191
    intermfluent_def               shift and go to state 192
    derivedfluent_def              shift and go to state 193
    observfluent_def               shift and go to state 194

state 109

    (29) pvar_list -> empty .

    RCURLY          reduce using rule 29 (pvar_list -> empty .)
    IDENT           reduce using rule 29 (pvar_list -> empty .)


state 110

    (44) cpf_section -> cpf_header LCURLY cpf_list . RCURLY SEMI
    (47) cpf_list -> cpf_list . cpf_def
    (49) cpf_def -> . pvar_expr ASSIGN_EQUAL expr SEMI
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT

    RCURLY          shift and go to state 196
    IDENT           shift and go to state 199

    cpf_def                        shift and go to state 197
    pvar_expr                      shift and go to state 198

state 111

    (48) cpf_list -> empty .

    RCURLY          reduce using rule 48 (cpf_list -> empty .)
    IDENT           reduce using rule 48 (cpf_list -> empty .)


state 112

    (50) reward_section -> REWARD ASSIGN_EQUAL expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 200
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 113

    (77) expr -> pvar_expr .

    SEMI            reduce using rule 77 (expr -> pvar_expr .)
    COMP_EQUAL      reduce using rule 77 (expr -> pvar_expr .)
    NEQ             reduce using rule 77 (expr -> pvar_expr .)
    GREATER         reduce using rule 77 (expr -> pvar_expr .)
    GREATEREQ       reduce using rule 77 (expr -> pvar_expr .)
    LESS            reduce using rule 77 (expr -> pvar_expr .)
    LESSEQ          reduce using rule 77 (expr -> pvar_expr .)
    AND             reduce using rule 77 (expr -> pvar_expr .)
    AMPERSAND       reduce using rule 77 (expr -> pvar_expr .)
    OR              reduce using rule 77 (expr -> pvar_expr .)
    IMPLY           reduce using rule 77 (expr -> pvar_expr .)
    EQUIV           reduce using rule 77 (expr -> pvar_expr .)
    PLUS            reduce using rule 77 (expr -> pvar_expr .)
    MINUS           reduce using rule 77 (expr -> pvar_expr .)
    TIMES           reduce using rule 77 (expr -> pvar_expr .)
    DIV             reduce using rule 77 (expr -> pvar_expr .)
    RPAREN          reduce using rule 77 (expr -> pvar_expr .)
    RBRACK          reduce using rule 77 (expr -> pvar_expr .)
    COMMA           reduce using rule 77 (expr -> pvar_expr .)
    ELSE            reduce using rule 77 (expr -> pvar_expr .)
    RCURLY          reduce using rule 77 (expr -> pvar_expr .)


state 114

    (78) expr -> group_expr .

    SEMI            reduce using rule 78 (expr -> group_expr .)
    COMP_EQUAL      reduce using rule 78 (expr -> group_expr .)
    NEQ             reduce using rule 78 (expr -> group_expr .)
    GREATER         reduce using rule 78 (expr -> group_expr .)
    GREATEREQ       reduce using rule 78 (expr -> group_expr .)
    LESS            reduce using rule 78 (expr -> group_expr .)
    LESSEQ          reduce using rule 78 (expr -> group_expr .)
    AND             reduce using rule 78 (expr -> group_expr .)
    AMPERSAND       reduce using rule 78 (expr -> group_expr .)
    OR              reduce using rule 78 (expr -> group_expr .)
    IMPLY           reduce using rule 78 (expr -> group_expr .)
    EQUIV           reduce using rule 78 (expr -> group_expr .)
    PLUS            reduce using rule 78 (expr -> group_expr .)
    MINUS           reduce using rule 78 (expr -> group_expr .)
    TIMES           reduce using rule 78 (expr -> group_expr .)
    DIV             reduce using rule 78 (expr -> group_expr .)
    RPAREN          reduce using rule 78 (expr -> group_expr .)
    RBRACK          reduce using rule 78 (expr -> group_expr .)
    COMMA           reduce using rule 78 (expr -> group_expr .)
    ELSE            reduce using rule 78 (expr -> group_expr .)
    RCURLY          reduce using rule 78 (expr -> group_expr .)


state 115

    (79) expr -> function_expr .

    SEMI            reduce using rule 79 (expr -> function_expr .)
    COMP_EQUAL      reduce using rule 79 (expr -> function_expr .)
    NEQ             reduce using rule 79 (expr -> function_expr .)
    GREATER         reduce using rule 79 (expr -> function_expr .)
    GREATEREQ       reduce using rule 79 (expr -> function_expr .)
    LESS            reduce using rule 79 (expr -> function_expr .)
    LESSEQ          reduce using rule 79 (expr -> function_expr .)
    AND             reduce using rule 79 (expr -> function_expr .)
    AMPERSAND       reduce using rule 79 (expr -> function_expr .)
    OR              reduce using rule 79 (expr -> function_expr .)
    IMPLY           reduce using rule 79 (expr -> function_expr .)
    EQUIV           reduce using rule 79 (expr -> function_expr .)
    PLUS            reduce using rule 79 (expr -> function_expr .)
    MINUS           reduce using rule 79 (expr -> function_expr .)
    TIMES           reduce using rule 79 (expr -> function_expr .)
    DIV             reduce using rule 79 (expr -> function_expr .)
    RPAREN          reduce using rule 79 (expr -> function_expr .)
    RBRACK          reduce using rule 79 (expr -> function_expr .)
    COMMA           reduce using rule 79 (expr -> function_expr .)
    ELSE            reduce using rule 79 (expr -> function_expr .)
    RCURLY          reduce using rule 79 (expr -> function_expr .)


state 116

    (80) expr -> relational_expr .

    SEMI            reduce using rule 80 (expr -> relational_expr .)
    COMP_EQUAL      reduce using rule 80 (expr -> relational_expr .)
    NEQ             reduce using rule 80 (expr -> relational_expr .)
    GREATER         reduce using rule 80 (expr -> relational_expr .)
    GREATEREQ       reduce using rule 80 (expr -> relational_expr .)
    LESS            reduce using rule 80 (expr -> relational_expr .)
    LESSEQ          reduce using rule 80 (expr -> relational_expr .)
    AND             reduce using rule 80 (expr -> relational_expr .)
    AMPERSAND       reduce using rule 80 (expr -> relational_expr .)
    OR              reduce using rule 80 (expr -> relational_expr .)
    IMPLY           reduce using rule 80 (expr -> relational_expr .)
    EQUIV           reduce using rule 80 (expr -> relational_expr .)
    PLUS            reduce using rule 80 (expr -> relational_expr .)
    MINUS           reduce using rule 80 (expr -> relational_expr .)
    TIMES           reduce using rule 80 (expr -> relational_expr .)
    DIV             reduce using rule 80 (expr -> relational_expr .)
    RPAREN          reduce using rule 80 (expr -> relational_expr .)
    RBRACK          reduce using rule 80 (expr -> relational_expr .)
    COMMA           reduce using rule 80 (expr -> relational_expr .)
    ELSE            reduce using rule 80 (expr -> relational_expr .)
    RCURLY          reduce using rule 80 (expr -> relational_expr .)


state 117

    (81) expr -> boolean_expr .

    SEMI            reduce using rule 81 (expr -> boolean_expr .)
    COMP_EQUAL      reduce using rule 81 (expr -> boolean_expr .)
    NEQ             reduce using rule 81 (expr -> boolean_expr .)
    GREATER         reduce using rule 81 (expr -> boolean_expr .)
    GREATEREQ       reduce using rule 81 (expr -> boolean_expr .)
    LESS            reduce using rule 81 (expr -> boolean_expr .)
    LESSEQ          reduce using rule 81 (expr -> boolean_expr .)
    AND             reduce using rule 81 (expr -> boolean_expr .)
    AMPERSAND       reduce using rule 81 (expr -> boolean_expr .)
    OR              reduce using rule 81 (expr -> boolean_expr .)
    IMPLY           reduce using rule 81 (expr -> boolean_expr .)
    EQUIV           reduce using rule 81 (expr -> boolean_expr .)
    PLUS            reduce using rule 81 (expr -> boolean_expr .)
    MINUS           reduce using rule 81 (expr -> boolean_expr .)
    TIMES           reduce using rule 81 (expr -> boolean_expr .)
    DIV             reduce using rule 81 (expr -> boolean_expr .)
    RPAREN          reduce using rule 81 (expr -> boolean_expr .)
    RBRACK          reduce using rule 81 (expr -> boolean_expr .)
    COMMA           reduce using rule 81 (expr -> boolean_expr .)
    ELSE            reduce using rule 81 (expr -> boolean_expr .)
    RCURLY          reduce using rule 81 (expr -> boolean_expr .)


state 118

    (82) expr -> quantifier_expr .

    SEMI            reduce using rule 82 (expr -> quantifier_expr .)
    COMP_EQUAL      reduce using rule 82 (expr -> quantifier_expr .)
    NEQ             reduce using rule 82 (expr -> quantifier_expr .)
    GREATER         reduce using rule 82 (expr -> quantifier_expr .)
    GREATEREQ       reduce using rule 82 (expr -> quantifier_expr .)
    LESS            reduce using rule 82 (expr -> quantifier_expr .)
    LESSEQ          reduce using rule 82 (expr -> quantifier_expr .)
    AND             reduce using rule 82 (expr -> quantifier_expr .)
    AMPERSAND       reduce using rule 82 (expr -> quantifier_expr .)
    OR              reduce using rule 82 (expr -> quantifier_expr .)
    IMPLY           reduce using rule 82 (expr -> quantifier_expr .)
    EQUIV           reduce using rule 82 (expr -> quantifier_expr .)
    PLUS            reduce using rule 82 (expr -> quantifier_expr .)
    MINUS           reduce using rule 82 (expr -> quantifier_expr .)
    TIMES           reduce using rule 82 (expr -> quantifier_expr .)
    DIV             reduce using rule 82 (expr -> quantifier_expr .)
    RPAREN          reduce using rule 82 (expr -> quantifier_expr .)
    RBRACK          reduce using rule 82 (expr -> quantifier_expr .)
    COMMA           reduce using rule 82 (expr -> quantifier_expr .)
    ELSE            reduce using rule 82 (expr -> quantifier_expr .)
    RCURLY          reduce using rule 82 (expr -> quantifier_expr .)


state 119

    (83) expr -> numerical_expr .

    SEMI            reduce using rule 83 (expr -> numerical_expr .)
    COMP_EQUAL      reduce using rule 83 (expr -> numerical_expr .)
    NEQ             reduce using rule 83 (expr -> numerical_expr .)
    GREATER         reduce using rule 83 (expr -> numerical_expr .)
    GREATEREQ       reduce using rule 83 (expr -> numerical_expr .)
    LESS            reduce using rule 83 (expr -> numerical_expr .)
    LESSEQ          reduce using rule 83 (expr -> numerical_expr .)
    AND             reduce using rule 83 (expr -> numerical_expr .)
    AMPERSAND       reduce using rule 83 (expr -> numerical_expr .)
    OR              reduce using rule 83 (expr -> numerical_expr .)
    IMPLY           reduce using rule 83 (expr -> numerical_expr .)
    EQUIV           reduce using rule 83 (expr -> numerical_expr .)
    PLUS            reduce using rule 83 (expr -> numerical_expr .)
    MINUS           reduce using rule 83 (expr -> numerical_expr .)
    TIMES           reduce using rule 83 (expr -> numerical_expr .)
    DIV             reduce using rule 83 (expr -> numerical_expr .)
    RPAREN          reduce using rule 83 (expr -> numerical_expr .)
    RBRACK          reduce using rule 83 (expr -> numerical_expr .)
    COMMA           reduce using rule 83 (expr -> numerical_expr .)
    ELSE            reduce using rule 83 (expr -> numerical_expr .)
    RCURLY          reduce using rule 83 (expr -> numerical_expr .)


state 120

    (84) expr -> aggregation_expr .

    SEMI            reduce using rule 84 (expr -> aggregation_expr .)
    COMP_EQUAL      reduce using rule 84 (expr -> aggregation_expr .)
    NEQ             reduce using rule 84 (expr -> aggregation_expr .)
    GREATER         reduce using rule 84 (expr -> aggregation_expr .)
    GREATEREQ       reduce using rule 84 (expr -> aggregation_expr .)
    LESS            reduce using rule 84 (expr -> aggregation_expr .)
    LESSEQ          reduce using rule 84 (expr -> aggregation_expr .)
    AND             reduce using rule 84 (expr -> aggregation_expr .)
    AMPERSAND       reduce using rule 84 (expr -> aggregation_expr .)
    OR              reduce using rule 84 (expr -> aggregation_expr .)
    IMPLY           reduce using rule 84 (expr -> aggregation_expr .)
    EQUIV           reduce using rule 84 (expr -> aggregation_expr .)
    PLUS            reduce using rule 84 (expr -> aggregation_expr .)
    MINUS           reduce using rule 84 (expr -> aggregation_expr .)
    TIMES           reduce using rule 84 (expr -> aggregation_expr .)
    DIV             reduce using rule 84 (expr -> aggregation_expr .)
    RPAREN          reduce using rule 84 (expr -> aggregation_expr .)
    RBRACK          reduce using rule 84 (expr -> aggregation_expr .)
    COMMA           reduce using rule 84 (expr -> aggregation_expr .)
    ELSE            reduce using rule 84 (expr -> aggregation_expr .)
    RCURLY          reduce using rule 84 (expr -> aggregation_expr .)


state 121

    (85) expr -> control_expr .

    SEMI            reduce using rule 85 (expr -> control_expr .)
    COMP_EQUAL      reduce using rule 85 (expr -> control_expr .)
    NEQ             reduce using rule 85 (expr -> control_expr .)
    GREATER         reduce using rule 85 (expr -> control_expr .)
    GREATEREQ       reduce using rule 85 (expr -> control_expr .)
    LESS            reduce using rule 85 (expr -> control_expr .)
    LESSEQ          reduce using rule 85 (expr -> control_expr .)
    AND             reduce using rule 85 (expr -> control_expr .)
    AMPERSAND       reduce using rule 85 (expr -> control_expr .)
    OR              reduce using rule 85 (expr -> control_expr .)
    IMPLY           reduce using rule 85 (expr -> control_expr .)
    EQUIV           reduce using rule 85 (expr -> control_expr .)
    PLUS            reduce using rule 85 (expr -> control_expr .)
    MINUS           reduce using rule 85 (expr -> control_expr .)
    TIMES           reduce using rule 85 (expr -> control_expr .)
    DIV             reduce using rule 85 (expr -> control_expr .)
    RPAREN          reduce using rule 85 (expr -> control_expr .)
    RBRACK          reduce using rule 85 (expr -> control_expr .)
    COMMA           reduce using rule 85 (expr -> control_expr .)
    ELSE            reduce using rule 85 (expr -> control_expr .)
    RCURLY          reduce using rule 85 (expr -> control_expr .)


state 122

    (86) expr -> randomvar_expr .

    SEMI            reduce using rule 86 (expr -> randomvar_expr .)
    COMP_EQUAL      reduce using rule 86 (expr -> randomvar_expr .)
    NEQ             reduce using rule 86 (expr -> randomvar_expr .)
    GREATER         reduce using rule 86 (expr -> randomvar_expr .)
    GREATEREQ       reduce using rule 86 (expr -> randomvar_expr .)
    LESS            reduce using rule 86 (expr -> randomvar_expr .)
    LESSEQ          reduce using rule 86 (expr -> randomvar_expr .)
    AND             reduce using rule 86 (expr -> randomvar_expr .)
    AMPERSAND       reduce using rule 86 (expr -> randomvar_expr .)
    OR              reduce using rule 86 (expr -> randomvar_expr .)
    IMPLY           reduce using rule 86 (expr -> randomvar_expr .)
    EQUIV           reduce using rule 86 (expr -> randomvar_expr .)
    PLUS            reduce using rule 86 (expr -> randomvar_expr .)
    MINUS           reduce using rule 86 (expr -> randomvar_expr .)
    TIMES           reduce using rule 86 (expr -> randomvar_expr .)
    DIV             reduce using rule 86 (expr -> randomvar_expr .)
    RPAREN          reduce using rule 86 (expr -> randomvar_expr .)
    RBRACK          reduce using rule 86 (expr -> randomvar_expr .)
    COMMA           reduce using rule 86 (expr -> randomvar_expr .)
    ELSE            reduce using rule 86 (expr -> randomvar_expr .)
    RCURLY          reduce using rule 86 (expr -> randomvar_expr .)


state 123

    (87) pvar_expr -> IDENT . LPAREN term_list RPAREN
    (88) pvar_expr -> IDENT .
    (91) function_expr -> IDENT . LBRACK expr_list RBRACK
    (115) aggregation_expr -> IDENT . UNDERSCORE LCURLY typed_var_list RCURLY expr

    LPAREN          shift and go to state 216
    SEMI            reduce using rule 88 (pvar_expr -> IDENT .)
    COMP_EQUAL      reduce using rule 88 (pvar_expr -> IDENT .)
    NEQ             reduce using rule 88 (pvar_expr -> IDENT .)
    GREATER         reduce using rule 88 (pvar_expr -> IDENT .)
    GREATEREQ       reduce using rule 88 (pvar_expr -> IDENT .)
    LESS            reduce using rule 88 (pvar_expr -> IDENT .)
    LESSEQ          reduce using rule 88 (pvar_expr -> IDENT .)
    AND             reduce using rule 88 (pvar_expr -> IDENT .)
    AMPERSAND       reduce using rule 88 (pvar_expr -> IDENT .)
    OR              reduce using rule 88 (pvar_expr -> IDENT .)
    IMPLY           reduce using rule 88 (pvar_expr -> IDENT .)
    EQUIV           reduce using rule 88 (pvar_expr -> IDENT .)
    PLUS            reduce using rule 88 (pvar_expr -> IDENT .)
    MINUS           reduce using rule 88 (pvar_expr -> IDENT .)
    TIMES           reduce using rule 88 (pvar_expr -> IDENT .)
    DIV             reduce using rule 88 (pvar_expr -> IDENT .)
    RPAREN          reduce using rule 88 (pvar_expr -> IDENT .)
    RBRACK          reduce using rule 88 (pvar_expr -> IDENT .)
    COMMA           reduce using rule 88 (pvar_expr -> IDENT .)
    ELSE            reduce using rule 88 (pvar_expr -> IDENT .)
    RCURLY          reduce using rule 88 (pvar_expr -> IDENT .)
    LBRACK          shift and go to state 217
    UNDERSCORE      shift and go to state 218


state 124

    (90) group_expr -> LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 219
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 125

    (89) group_expr -> LBRACK . expr RBRACK
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 220
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 126

    (103) boolean_expr -> NOT . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 221
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 127

    (104) boolean_expr -> bool_type .

    SEMI            reduce using rule 104 (boolean_expr -> bool_type .)
    COMP_EQUAL      reduce using rule 104 (boolean_expr -> bool_type .)
    NEQ             reduce using rule 104 (boolean_expr -> bool_type .)
    GREATER         reduce using rule 104 (boolean_expr -> bool_type .)
    GREATEREQ       reduce using rule 104 (boolean_expr -> bool_type .)
    LESS            reduce using rule 104 (boolean_expr -> bool_type .)
    LESSEQ          reduce using rule 104 (boolean_expr -> bool_type .)
    AND             reduce using rule 104 (boolean_expr -> bool_type .)
    AMPERSAND       reduce using rule 104 (boolean_expr -> bool_type .)
    OR              reduce using rule 104 (boolean_expr -> bool_type .)
    IMPLY           reduce using rule 104 (boolean_expr -> bool_type .)
    EQUIV           reduce using rule 104 (boolean_expr -> bool_type .)
    PLUS            reduce using rule 104 (boolean_expr -> bool_type .)
    MINUS           reduce using rule 104 (boolean_expr -> bool_type .)
    TIMES           reduce using rule 104 (boolean_expr -> bool_type .)
    DIV             reduce using rule 104 (boolean_expr -> bool_type .)
    RPAREN          reduce using rule 104 (boolean_expr -> bool_type .)
    RBRACK          reduce using rule 104 (boolean_expr -> bool_type .)
    COMMA           reduce using rule 104 (boolean_expr -> bool_type .)
    ELSE            reduce using rule 104 (boolean_expr -> bool_type .)
    RCURLY          reduce using rule 104 (boolean_expr -> bool_type .)


state 128

    (105) quantifier_expr -> FORALL . UNDERSCORE LCURLY typed_var_list RCURLY expr

    UNDERSCORE      shift and go to state 222


state 129

    (106) quantifier_expr -> EXISTS . UNDERSCORE LCURLY typed_var_list RCURLY expr

    UNDERSCORE      shift and go to state 223


state 130

    (112) numerical_expr -> PLUS . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 224
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 131

    (111) numerical_expr -> MINUS . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 225
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 132

    (113) numerical_expr -> INTEGER .

    SEMI            reduce using rule 113 (numerical_expr -> INTEGER .)
    COMP_EQUAL      reduce using rule 113 (numerical_expr -> INTEGER .)
    NEQ             reduce using rule 113 (numerical_expr -> INTEGER .)
    GREATER         reduce using rule 113 (numerical_expr -> INTEGER .)
    GREATEREQ       reduce using rule 113 (numerical_expr -> INTEGER .)
    LESS            reduce using rule 113 (numerical_expr -> INTEGER .)
    LESSEQ          reduce using rule 113 (numerical_expr -> INTEGER .)
    AND             reduce using rule 113 (numerical_expr -> INTEGER .)
    AMPERSAND       reduce using rule 113 (numerical_expr -> INTEGER .)
    OR              reduce using rule 113 (numerical_expr -> INTEGER .)
    IMPLY           reduce using rule 113 (numerical_expr -> INTEGER .)
    EQUIV           reduce using rule 113 (numerical_expr -> INTEGER .)
    PLUS            reduce using rule 113 (numerical_expr -> INTEGER .)
    MINUS           reduce using rule 113 (numerical_expr -> INTEGER .)
    TIMES           reduce using rule 113 (numerical_expr -> INTEGER .)
    DIV             reduce using rule 113 (numerical_expr -> INTEGER .)
    RPAREN          reduce using rule 113 (numerical_expr -> INTEGER .)
    RBRACK          reduce using rule 113 (numerical_expr -> INTEGER .)
    COMMA           reduce using rule 113 (numerical_expr -> INTEGER .)
    ELSE            reduce using rule 113 (numerical_expr -> INTEGER .)
    RCURLY          reduce using rule 113 (numerical_expr -> INTEGER .)


state 133

    (114) numerical_expr -> DOUBLE .

    SEMI            reduce using rule 114 (numerical_expr -> DOUBLE .)
    COMP_EQUAL      reduce using rule 114 (numerical_expr -> DOUBLE .)
    NEQ             reduce using rule 114 (numerical_expr -> DOUBLE .)
    GREATER         reduce using rule 114 (numerical_expr -> DOUBLE .)
    GREATEREQ       reduce using rule 114 (numerical_expr -> DOUBLE .)
    LESS            reduce using rule 114 (numerical_expr -> DOUBLE .)
    LESSEQ          reduce using rule 114 (numerical_expr -> DOUBLE .)
    AND             reduce using rule 114 (numerical_expr -> DOUBLE .)
    AMPERSAND       reduce using rule 114 (numerical_expr -> DOUBLE .)
    OR              reduce using rule 114 (numerical_expr -> DOUBLE .)
    IMPLY           reduce using rule 114 (numerical_expr -> DOUBLE .)
    EQUIV           reduce using rule 114 (numerical_expr -> DOUBLE .)
    PLUS            reduce using rule 114 (numerical_expr -> DOUBLE .)
    MINUS           reduce using rule 114 (numerical_expr -> DOUBLE .)
    TIMES           reduce using rule 114 (numerical_expr -> DOUBLE .)
    DIV             reduce using rule 114 (numerical_expr -> DOUBLE .)
    RPAREN          reduce using rule 114 (numerical_expr -> DOUBLE .)
    RBRACK          reduce using rule 114 (numerical_expr -> DOUBLE .)
    COMMA           reduce using rule 114 (numerical_expr -> DOUBLE .)
    ELSE            reduce using rule 114 (numerical_expr -> DOUBLE .)
    RCURLY          reduce using rule 114 (numerical_expr -> DOUBLE .)


state 134

    (116) control_expr -> IF . LPAREN expr RPAREN THEN expr ELSE expr

    LPAREN          shift and go to state 226


state 135

    (117) control_expr -> SWITCH . LPAREN term RPAREN LCURLY case_list RCURLY

    LPAREN          shift and go to state 227


state 136

    (118) randomvar_expr -> BERNOULLI . LPAREN expr RPAREN

    LPAREN          shift and go to state 228


state 137

    (119) randomvar_expr -> DIRAC_DELTA . LPAREN expr RPAREN

    LPAREN          shift and go to state 229


state 138

    (120) randomvar_expr -> KRON_DELTA . LPAREN expr RPAREN

    LPAREN          shift and go to state 230


state 139

    (121) randomvar_expr -> UNIFORM . LPAREN expr COMMA expr RPAREN

    LPAREN          shift and go to state 231


state 140

    (122) randomvar_expr -> NORMAL . LPAREN expr COMMA expr RPAREN

    LPAREN          shift and go to state 232


state 141

    (123) randomvar_expr -> EXPONENTIAL . LPAREN expr RPAREN

    LPAREN          shift and go to state 233


state 142

    (124) randomvar_expr -> DISCRETE . LPAREN IDENT COMMA lconst_case_list RPAREN

    LPAREN          shift and go to state 234


state 143

    (125) randomvar_expr -> DIRICHLET . LPAREN IDENT COMMA expr RPAREN

    LPAREN          shift and go to state 235


state 144

    (126) randomvar_expr -> POISSON . LPAREN expr RPAREN

    LPAREN          shift and go to state 236


state 145

    (127) randomvar_expr -> WEIBULL . LPAREN expr COMMA expr RPAREN

    LPAREN          shift and go to state 237


state 146

    (128) randomvar_expr -> GAMMA . LPAREN expr COMMA expr RPAREN

    LPAREN          shift and go to state 238


state 147

    (155) bool_type -> TRUE .

    SEMI            reduce using rule 155 (bool_type -> TRUE .)
    COMP_EQUAL      reduce using rule 155 (bool_type -> TRUE .)
    NEQ             reduce using rule 155 (bool_type -> TRUE .)
    GREATER         reduce using rule 155 (bool_type -> TRUE .)
    GREATEREQ       reduce using rule 155 (bool_type -> TRUE .)
    LESS            reduce using rule 155 (bool_type -> TRUE .)
    LESSEQ          reduce using rule 155 (bool_type -> TRUE .)
    AND             reduce using rule 155 (bool_type -> TRUE .)
    AMPERSAND       reduce using rule 155 (bool_type -> TRUE .)
    OR              reduce using rule 155 (bool_type -> TRUE .)
    IMPLY           reduce using rule 155 (bool_type -> TRUE .)
    EQUIV           reduce using rule 155 (bool_type -> TRUE .)
    PLUS            reduce using rule 155 (bool_type -> TRUE .)
    MINUS           reduce using rule 155 (bool_type -> TRUE .)
    TIMES           reduce using rule 155 (bool_type -> TRUE .)
    DIV             reduce using rule 155 (bool_type -> TRUE .)
    RPAREN          reduce using rule 155 (bool_type -> TRUE .)
    RBRACK          reduce using rule 155 (bool_type -> TRUE .)
    COMMA           reduce using rule 155 (bool_type -> TRUE .)
    ELSE            reduce using rule 155 (bool_type -> TRUE .)
    RCURLY          reduce using rule 155 (bool_type -> TRUE .)


state 148

    (156) bool_type -> FALSE .

    SEMI            reduce using rule 156 (bool_type -> FALSE .)
    COMP_EQUAL      reduce using rule 156 (bool_type -> FALSE .)
    NEQ             reduce using rule 156 (bool_type -> FALSE .)
    GREATER         reduce using rule 156 (bool_type -> FALSE .)
    GREATEREQ       reduce using rule 156 (bool_type -> FALSE .)
    LESS            reduce using rule 156 (bool_type -> FALSE .)
    LESSEQ          reduce using rule 156 (bool_type -> FALSE .)
    AND             reduce using rule 156 (bool_type -> FALSE .)
    AMPERSAND       reduce using rule 156 (bool_type -> FALSE .)
    OR              reduce using rule 156 (bool_type -> FALSE .)
    IMPLY           reduce using rule 156 (bool_type -> FALSE .)
    EQUIV           reduce using rule 156 (bool_type -> FALSE .)
    PLUS            reduce using rule 156 (bool_type -> FALSE .)
    MINUS           reduce using rule 156 (bool_type -> FALSE .)
    TIMES           reduce using rule 156 (bool_type -> FALSE .)
    DIV             reduce using rule 156 (bool_type -> FALSE .)
    RPAREN          reduce using rule 156 (bool_type -> FALSE .)
    RBRACK          reduce using rule 156 (bool_type -> FALSE .)
    COMMA           reduce using rule 156 (bool_type -> FALSE .)
    ELSE            reduce using rule 156 (bool_type -> FALSE .)
    RCURLY          reduce using rule 156 (bool_type -> FALSE .)


state 149

    (51) termination_section -> TERMINATION LCURLY termination_list . RCURLY SEMI
    (53) termination_list -> termination_list . termination_cond_def
    (55) termination_cond_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 239
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    termination_cond_def           shift and go to state 240
    expr                           shift and go to state 152
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 150

    (52) termination_section -> TERMINATION LCURLY RCURLY . SEMI

    SEMI            shift and go to state 241


state 151

    (54) termination_list -> termination_cond_def .

    RCURLY          reduce using rule 54 (termination_list -> termination_cond_def .)
    IDENT           reduce using rule 54 (termination_list -> termination_cond_def .)
    LBRACK          reduce using rule 54 (termination_list -> termination_cond_def .)
    LPAREN          reduce using rule 54 (termination_list -> termination_cond_def .)
    NOT             reduce using rule 54 (termination_list -> termination_cond_def .)
    FORALL          reduce using rule 54 (termination_list -> termination_cond_def .)
    EXISTS          reduce using rule 54 (termination_list -> termination_cond_def .)
    MINUS           reduce using rule 54 (termination_list -> termination_cond_def .)
    PLUS            reduce using rule 54 (termination_list -> termination_cond_def .)
    INTEGER         reduce using rule 54 (termination_list -> termination_cond_def .)
    DOUBLE          reduce using rule 54 (termination_list -> termination_cond_def .)
    IF              reduce using rule 54 (termination_list -> termination_cond_def .)
    SWITCH          reduce using rule 54 (termination_list -> termination_cond_def .)
    BERNOULLI       reduce using rule 54 (termination_list -> termination_cond_def .)
    DIRAC_DELTA     reduce using rule 54 (termination_list -> termination_cond_def .)
    KRON_DELTA      reduce using rule 54 (termination_list -> termination_cond_def .)
    UNIFORM         reduce using rule 54 (termination_list -> termination_cond_def .)
    NORMAL          reduce using rule 54 (termination_list -> termination_cond_def .)
    EXPONENTIAL     reduce using rule 54 (termination_list -> termination_cond_def .)
    DISCRETE        reduce using rule 54 (termination_list -> termination_cond_def .)
    DIRICHLET       reduce using rule 54 (termination_list -> termination_cond_def .)
    POISSON         reduce using rule 54 (termination_list -> termination_cond_def .)
    WEIBULL         reduce using rule 54 (termination_list -> termination_cond_def .)
    GAMMA           reduce using rule 54 (termination_list -> termination_cond_def .)
    TRUE            reduce using rule 54 (termination_list -> termination_cond_def .)
    FALSE           reduce using rule 54 (termination_list -> termination_cond_def .)


state 152

    (55) termination_cond_def -> expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 242
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 153

    (56) action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list . RCURLY SEMI
    (58) action_precond_list -> action_precond_list . action_precond_def
    (60) action_precond_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 243
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    action_precond_def             shift and go to state 244
    expr                           shift and go to state 156
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 154

    (57) action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY . SEMI

    SEMI            shift and go to state 245


state 155

    (59) action_precond_list -> action_precond_def .

    RCURLY          reduce using rule 59 (action_precond_list -> action_precond_def .)
    IDENT           reduce using rule 59 (action_precond_list -> action_precond_def .)
    LBRACK          reduce using rule 59 (action_precond_list -> action_precond_def .)
    LPAREN          reduce using rule 59 (action_precond_list -> action_precond_def .)
    NOT             reduce using rule 59 (action_precond_list -> action_precond_def .)
    FORALL          reduce using rule 59 (action_precond_list -> action_precond_def .)
    EXISTS          reduce using rule 59 (action_precond_list -> action_precond_def .)
    MINUS           reduce using rule 59 (action_precond_list -> action_precond_def .)
    PLUS            reduce using rule 59 (action_precond_list -> action_precond_def .)
    INTEGER         reduce using rule 59 (action_precond_list -> action_precond_def .)
    DOUBLE          reduce using rule 59 (action_precond_list -> action_precond_def .)
    IF              reduce using rule 59 (action_precond_list -> action_precond_def .)
    SWITCH          reduce using rule 59 (action_precond_list -> action_precond_def .)
    BERNOULLI       reduce using rule 59 (action_precond_list -> action_precond_def .)
    DIRAC_DELTA     reduce using rule 59 (action_precond_list -> action_precond_def .)
    KRON_DELTA      reduce using rule 59 (action_precond_list -> action_precond_def .)
    UNIFORM         reduce using rule 59 (action_precond_list -> action_precond_def .)
    NORMAL          reduce using rule 59 (action_precond_list -> action_precond_def .)
    EXPONENTIAL     reduce using rule 59 (action_precond_list -> action_precond_def .)
    DISCRETE        reduce using rule 59 (action_precond_list -> action_precond_def .)
    DIRICHLET       reduce using rule 59 (action_precond_list -> action_precond_def .)
    POISSON         reduce using rule 59 (action_precond_list -> action_precond_def .)
    WEIBULL         reduce using rule 59 (action_precond_list -> action_precond_def .)
    GAMMA           reduce using rule 59 (action_precond_list -> action_precond_def .)
    TRUE            reduce using rule 59 (action_precond_list -> action_precond_def .)
    FALSE           reduce using rule 59 (action_precond_list -> action_precond_def .)


state 156

    (60) action_precond_def -> expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 246
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 157

    (61) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list . RCURLY SEMI
    (63) state_cons_list -> state_cons_list . state_cons_def
    (65) state_cons_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 247
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    state_cons_def                 shift and go to state 248
    expr                           shift and go to state 160
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 158

    (62) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY . SEMI

    SEMI            shift and go to state 249


state 159

    (64) state_cons_list -> state_cons_def .

    RCURLY          reduce using rule 64 (state_cons_list -> state_cons_def .)
    IDENT           reduce using rule 64 (state_cons_list -> state_cons_def .)
    LBRACK          reduce using rule 64 (state_cons_list -> state_cons_def .)
    LPAREN          reduce using rule 64 (state_cons_list -> state_cons_def .)
    NOT             reduce using rule 64 (state_cons_list -> state_cons_def .)
    FORALL          reduce using rule 64 (state_cons_list -> state_cons_def .)
    EXISTS          reduce using rule 64 (state_cons_list -> state_cons_def .)
    MINUS           reduce using rule 64 (state_cons_list -> state_cons_def .)
    PLUS            reduce using rule 64 (state_cons_list -> state_cons_def .)
    INTEGER         reduce using rule 64 (state_cons_list -> state_cons_def .)
    DOUBLE          reduce using rule 64 (state_cons_list -> state_cons_def .)
    IF              reduce using rule 64 (state_cons_list -> state_cons_def .)
    SWITCH          reduce using rule 64 (state_cons_list -> state_cons_def .)
    BERNOULLI       reduce using rule 64 (state_cons_list -> state_cons_def .)
    DIRAC_DELTA     reduce using rule 64 (state_cons_list -> state_cons_def .)
    KRON_DELTA      reduce using rule 64 (state_cons_list -> state_cons_def .)
    UNIFORM         reduce using rule 64 (state_cons_list -> state_cons_def .)
    NORMAL          reduce using rule 64 (state_cons_list -> state_cons_def .)
    EXPONENTIAL     reduce using rule 64 (state_cons_list -> state_cons_def .)
    DISCRETE        reduce using rule 64 (state_cons_list -> state_cons_def .)
    DIRICHLET       reduce using rule 64 (state_cons_list -> state_cons_def .)
    POISSON         reduce using rule 64 (state_cons_list -> state_cons_def .)
    WEIBULL         reduce using rule 64 (state_cons_list -> state_cons_def .)
    GAMMA           reduce using rule 64 (state_cons_list -> state_cons_def .)
    TRUE            reduce using rule 64 (state_cons_list -> state_cons_def .)
    FALSE           reduce using rule 64 (state_cons_list -> state_cons_def .)


state 160

    (65) state_cons_def -> expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 250
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 161

    (66) state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list . RCURLY SEMI
    (68) state_invariant_list -> state_invariant_list . state_invariant_def
    (70) state_invariant_def -> . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    RCURLY          shift and go to state 251
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    state_invariant_def            shift and go to state 252
    expr                           shift and go to state 164
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 162

    (67) state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY . SEMI

    SEMI            shift and go to state 253


state 163

    (69) state_invariant_list -> state_invariant_def .

    RCURLY          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    IDENT           reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    LBRACK          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    LPAREN          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    NOT             reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    FORALL          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    EXISTS          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    MINUS           reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    PLUS            reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    INTEGER         reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    DOUBLE          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    IF              reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    SWITCH          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    BERNOULLI       reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    DIRAC_DELTA     reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    KRON_DELTA      reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    UNIFORM         reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    NORMAL          reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    EXPONENTIAL     reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    DISCRETE        reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    DIRICHLET       reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    POISSON         reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    WEIBULL         reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    GAMMA           reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    TRUE            reduce using rule 69 (state_invariant_list -> state_invariant_def .)
    FALSE           reduce using rule 69 (state_invariant_list -> state_invariant_def .)


state 164

    (70) state_invariant_def -> expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 254
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 165

    (7) req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY . SEMI

    SEMI            shift and go to state 255


state 166

    (8) req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .

    RCURLY          reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    TYPES           reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    REWARD          reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    TERMINATION     reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    CPFS            reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)
    CDFS            reduce using rule 8 (req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI .)


state 167

    (204) string_list -> string_list COMMA IDENT .

    RCURLY          reduce using rule 204 (string_list -> string_list COMMA IDENT .)
    COMMA           reduce using rule 204 (string_list -> string_list COMMA IDENT .)


state 168

    (174) domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .

    RCURLY          reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    DOMAIN          reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    NON_FLUENTS     reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    OBJECTS         reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    INIT_STATE      reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    HORIZON         reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)
    DISCOUNT        reduce using rule 174 (domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI .)


state 169

    (175) nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .

    RCURLY          reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    DOMAIN          reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    NON_FLUENTS     reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    OBJECTS         reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    INIT_STATE      reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    HORIZON         reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)
    DISCOUNT        reduce using rule 175 (nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI .)


state 170

    (176) objects_section -> OBJECTS LCURLY objects_list RCURLY . SEMI

    SEMI            shift and go to state 256


state 171

    (188) objects_list -> objects_list objects_def .

    RCURLY          reduce using rule 188 (objects_list -> objects_list objects_def .)
    IDENT           reduce using rule 188 (objects_list -> objects_list objects_def .)


state 172

    (191) objects_def -> IDENT COLON . LCURLY object_const_list RCURLY SEMI

    LCURLY          shift and go to state 257


state 173

    (177) init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY . SEMI

    SEMI            shift and go to state 258


state 174

    (194) pvar_inst_list -> pvar_inst_list pvar_inst_def .

    RCURLY          reduce using rule 194 (pvar_inst_list -> pvar_inst_list pvar_inst_def .)
    IDENT           reduce using rule 194 (pvar_inst_list -> pvar_inst_list pvar_inst_def .)
    NOT             reduce using rule 194 (pvar_inst_list -> pvar_inst_list pvar_inst_def .)


state 175

    (196) pvar_inst_def -> IDENT LPAREN . lconst_list RPAREN SEMI
    (200) pvar_inst_def -> IDENT LPAREN . lconst_list RPAREN ASSIGN_EQUAL range_const SEMI
    (202) lconst_list -> . lconst_list COMMA lconst
    (203) lconst_list -> . lconst
    (141) lconst -> . IDENT
    (142) lconst -> . ENUM_VAL

    IDENT           shift and go to state 259
    ENUM_VAL        shift and go to state 262

    lconst_list                    shift and go to state 260
    lconst                         shift and go to state 261

state 176

    (197) pvar_inst_def -> IDENT SEMI .

    RCURLY          reduce using rule 197 (pvar_inst_def -> IDENT SEMI .)
    IDENT           reduce using rule 197 (pvar_inst_def -> IDENT SEMI .)
    NOT             reduce using rule 197 (pvar_inst_def -> IDENT SEMI .)


state 177

    (201) pvar_inst_def -> IDENT ASSIGN_EQUAL . range_const SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 264
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 178

    (198) pvar_inst_def -> NOT IDENT . LPAREN lconst_list RPAREN SEMI
    (199) pvar_inst_def -> NOT IDENT . SEMI

    LPAREN          shift and go to state 273
    SEMI            shift and go to state 274


state 179

    (178) max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .

    RCURLY          reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    DOMAIN          reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    NON_FLUENTS     reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    OBJECTS         reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    INIT_STATE      reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    HORIZON         reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    DISCOUNT        reduce using rule 178 (max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)


state 180

    (179) horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .

    RCURLY          reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    DOMAIN          reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    NON_FLUENTS     reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    OBJECTS         reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    INIT_STATE      reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    HORIZON         reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)
    DISCOUNT        reduce using rule 179 (horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI .)


state 181

    (180) horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 275
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 182

    (181) discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .

    RCURLY          reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    DOMAIN          reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    NON_FLUENTS     reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    OBJECTS         reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    INIT_STATE      reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    HORIZON         reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)
    DISCOUNT        reduce using rule 181 (discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI .)


state 183

    (187) init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY . SEMI

    SEMI            shift and go to state 276


state 184

    (19) type_section -> TYPES LCURLY type_list RCURLY . SEMI

    SEMI            shift and go to state 277


state 185

    (20) type_list -> type_list type_def .

    RCURLY          reduce using rule 20 (type_list -> type_list type_def .)
    IDENT           reduce using rule 20 (type_list -> type_list type_def .)


state 186

    (22) type_def -> IDENT . COLON OBJECT SEMI
    (23) type_def -> IDENT . COLON LCURLY enum_list RCURLY SEMI

    COLON           shift and go to state 278


state 187

    (27) pvar_section -> PVARIABLES LCURLY pvar_list RCURLY . SEMI

    SEMI            shift and go to state 279


state 188

    (28) pvar_list -> pvar_list pvar_def .

    RCURLY          reduce using rule 28 (pvar_list -> pvar_list pvar_def .)
    IDENT           reduce using rule 28 (pvar_list -> pvar_list pvar_def .)


state 189

    (30) pvar_def -> nonfluent_def .

    RCURLY          reduce using rule 30 (pvar_def -> nonfluent_def .)
    IDENT           reduce using rule 30 (pvar_def -> nonfluent_def .)


state 190

    (31) pvar_def -> statefluent_def .

    RCURLY          reduce using rule 31 (pvar_def -> statefluent_def .)
    IDENT           reduce using rule 31 (pvar_def -> statefluent_def .)


state 191

    (32) pvar_def -> actionfluent_def .

    RCURLY          reduce using rule 32 (pvar_def -> actionfluent_def .)
    IDENT           reduce using rule 32 (pvar_def -> actionfluent_def .)


state 192

    (33) pvar_def -> intermfluent_def .

    RCURLY          reduce using rule 33 (pvar_def -> intermfluent_def .)
    IDENT           reduce using rule 33 (pvar_def -> intermfluent_def .)


state 193

    (34) pvar_def -> derivedfluent_def .

    RCURLY          reduce using rule 34 (pvar_def -> derivedfluent_def .)
    IDENT           reduce using rule 34 (pvar_def -> derivedfluent_def .)


state 194

    (35) pvar_def -> observfluent_def .

    RCURLY          reduce using rule 35 (pvar_def -> observfluent_def .)
    IDENT           reduce using rule 35 (pvar_def -> observfluent_def .)


state 195

    (36) nonfluent_def -> IDENT . param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (37) statefluent_def -> IDENT . param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (38) actionfluent_def -> IDENT . param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (39) intermfluent_def -> IDENT . param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT . param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI
    (41) derivedfluent_def -> IDENT . param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT . param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI
    (43) observfluent_def -> IDENT . param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI
    (143) param_list -> . COLON
    (144) param_list -> . LPAREN param_list2 RPAREN COLON

    COLON           shift and go to state 281
    LPAREN          shift and go to state 282

    param_list                     shift and go to state 280

state 196

    (44) cpf_section -> cpf_header LCURLY cpf_list RCURLY . SEMI

    SEMI            shift and go to state 283


state 197

    (47) cpf_list -> cpf_list cpf_def .

    RCURLY          reduce using rule 47 (cpf_list -> cpf_list cpf_def .)
    IDENT           reduce using rule 47 (cpf_list -> cpf_list cpf_def .)


state 198

    (49) cpf_def -> pvar_expr . ASSIGN_EQUAL expr SEMI

    ASSIGN_EQUAL    shift and go to state 284


state 199

    (87) pvar_expr -> IDENT . LPAREN term_list RPAREN
    (88) pvar_expr -> IDENT .

    LPAREN          shift and go to state 216
    ASSIGN_EQUAL    reduce using rule 88 (pvar_expr -> IDENT .)
    RPAREN          reduce using rule 88 (pvar_expr -> IDENT .)
    COMMA           reduce using rule 88 (pvar_expr -> IDENT .)
    COLON           reduce using rule 88 (pvar_expr -> IDENT .)


state 200

    (50) reward_section -> REWARD ASSIGN_EQUAL expr SEMI .

    RCURLY          reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    TYPES           reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    PVARIABLES      reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    REWARD          reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    TERMINATION     reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    ACTION_PRECONDITIONS reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    STATE_INVARIANTS reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    CPFS            reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)
    CDFS            reduce using rule 50 (reward_section -> REWARD ASSIGN_EQUAL expr SEMI .)


state 201

    (92) relational_expr -> expr COMP_EQUAL . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 285
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 202

    (93) relational_expr -> expr NEQ . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 286
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 203

    (94) relational_expr -> expr GREATER . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 287
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 204

    (95) relational_expr -> expr GREATEREQ . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 288
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 205

    (96) relational_expr -> expr LESS . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 289
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 206

    (97) relational_expr -> expr LESSEQ . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 290
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 207

    (98) boolean_expr -> expr AND . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 291
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 208

    (99) boolean_expr -> expr AMPERSAND . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 292
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 209

    (100) boolean_expr -> expr OR . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 293
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 210

    (101) boolean_expr -> expr IMPLY . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 294
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 211

    (102) boolean_expr -> expr EQUIV . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 295
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 212

    (107) numerical_expr -> expr PLUS . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 296
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 213

    (108) numerical_expr -> expr MINUS . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 297
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 214

    (109) numerical_expr -> expr TIMES . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 298
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 215

    (110) numerical_expr -> expr DIV . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 299
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 216

    (87) pvar_expr -> IDENT LPAREN . term_list RPAREN
    (71) term_list -> . term_list COMMA term
    (72) term_list -> . term
    (73) term_list -> . empty
    (74) term -> . VAR
    (75) term -> . ENUM_VAL
    (76) term -> . pvar_expr
    (207) empty -> .
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT

    VAR             shift and go to state 303
    ENUM_VAL        shift and go to state 304
    RPAREN          reduce using rule 207 (empty -> .)
    COMMA           reduce using rule 207 (empty -> .)
    IDENT           shift and go to state 199

    term_list                      shift and go to state 300
    term                           shift and go to state 301
    empty                          shift and go to state 302
    pvar_expr                      shift and go to state 305

state 217

    (91) function_expr -> IDENT LBRACK . expr_list RBRACK
    (132) expr_list -> . expr_list COMMA expr
    (133) expr_list -> . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr_list                      shift and go to state 306
    expr                           shift and go to state 307
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 218

    (115) aggregation_expr -> IDENT UNDERSCORE . LCURLY typed_var_list RCURLY expr

    LCURLY          shift and go to state 308


state 219

    (90) group_expr -> LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 309
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 220

    (89) group_expr -> LBRACK expr . RBRACK
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RBRACK          shift and go to state 310
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 221

    (103) boolean_expr -> NOT expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 103 (boolean_expr -> NOT expr .)
    COMP_EQUAL      reduce using rule 103 (boolean_expr -> NOT expr .)
    NEQ             reduce using rule 103 (boolean_expr -> NOT expr .)
    GREATER         reduce using rule 103 (boolean_expr -> NOT expr .)
    GREATEREQ       reduce using rule 103 (boolean_expr -> NOT expr .)
    LESS            reduce using rule 103 (boolean_expr -> NOT expr .)
    LESSEQ          reduce using rule 103 (boolean_expr -> NOT expr .)
    AND             reduce using rule 103 (boolean_expr -> NOT expr .)
    AMPERSAND       reduce using rule 103 (boolean_expr -> NOT expr .)
    OR              reduce using rule 103 (boolean_expr -> NOT expr .)
    IMPLY           reduce using rule 103 (boolean_expr -> NOT expr .)
    EQUIV           reduce using rule 103 (boolean_expr -> NOT expr .)
    PLUS            reduce using rule 103 (boolean_expr -> NOT expr .)
    MINUS           reduce using rule 103 (boolean_expr -> NOT expr .)
    TIMES           reduce using rule 103 (boolean_expr -> NOT expr .)
    DIV             reduce using rule 103 (boolean_expr -> NOT expr .)
    RPAREN          reduce using rule 103 (boolean_expr -> NOT expr .)
    RBRACK          reduce using rule 103 (boolean_expr -> NOT expr .)
    COMMA           reduce using rule 103 (boolean_expr -> NOT expr .)
    ELSE            reduce using rule 103 (boolean_expr -> NOT expr .)
    RCURLY          reduce using rule 103 (boolean_expr -> NOT expr .)

  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]
  ! TIMES           [ shift and go to state 214 ]
  ! DIV             [ shift and go to state 215 ]


state 222

    (105) quantifier_expr -> FORALL UNDERSCORE . LCURLY typed_var_list RCURLY expr

    LCURLY          shift and go to state 311


state 223

    (106) quantifier_expr -> EXISTS UNDERSCORE . LCURLY typed_var_list RCURLY expr

    LCURLY          shift and go to state 312


state 224

    (112) numerical_expr -> PLUS expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 112 (numerical_expr -> PLUS expr .)
    COMP_EQUAL      reduce using rule 112 (numerical_expr -> PLUS expr .)
    NEQ             reduce using rule 112 (numerical_expr -> PLUS expr .)
    GREATER         reduce using rule 112 (numerical_expr -> PLUS expr .)
    GREATEREQ       reduce using rule 112 (numerical_expr -> PLUS expr .)
    LESS            reduce using rule 112 (numerical_expr -> PLUS expr .)
    LESSEQ          reduce using rule 112 (numerical_expr -> PLUS expr .)
    AND             reduce using rule 112 (numerical_expr -> PLUS expr .)
    AMPERSAND       reduce using rule 112 (numerical_expr -> PLUS expr .)
    OR              reduce using rule 112 (numerical_expr -> PLUS expr .)
    IMPLY           reduce using rule 112 (numerical_expr -> PLUS expr .)
    EQUIV           reduce using rule 112 (numerical_expr -> PLUS expr .)
    PLUS            reduce using rule 112 (numerical_expr -> PLUS expr .)
    MINUS           reduce using rule 112 (numerical_expr -> PLUS expr .)
    TIMES           reduce using rule 112 (numerical_expr -> PLUS expr .)
    DIV             reduce using rule 112 (numerical_expr -> PLUS expr .)
    RPAREN          reduce using rule 112 (numerical_expr -> PLUS expr .)
    RBRACK          reduce using rule 112 (numerical_expr -> PLUS expr .)
    COMMA           reduce using rule 112 (numerical_expr -> PLUS expr .)
    ELSE            reduce using rule 112 (numerical_expr -> PLUS expr .)
    RCURLY          reduce using rule 112 (numerical_expr -> PLUS expr .)

  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]
  ! TIMES           [ shift and go to state 214 ]
  ! DIV             [ shift and go to state 215 ]


state 225

    (111) numerical_expr -> MINUS expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 111 (numerical_expr -> MINUS expr .)
    COMP_EQUAL      reduce using rule 111 (numerical_expr -> MINUS expr .)
    NEQ             reduce using rule 111 (numerical_expr -> MINUS expr .)
    GREATER         reduce using rule 111 (numerical_expr -> MINUS expr .)
    GREATEREQ       reduce using rule 111 (numerical_expr -> MINUS expr .)
    LESS            reduce using rule 111 (numerical_expr -> MINUS expr .)
    LESSEQ          reduce using rule 111 (numerical_expr -> MINUS expr .)
    AND             reduce using rule 111 (numerical_expr -> MINUS expr .)
    AMPERSAND       reduce using rule 111 (numerical_expr -> MINUS expr .)
    OR              reduce using rule 111 (numerical_expr -> MINUS expr .)
    IMPLY           reduce using rule 111 (numerical_expr -> MINUS expr .)
    EQUIV           reduce using rule 111 (numerical_expr -> MINUS expr .)
    PLUS            reduce using rule 111 (numerical_expr -> MINUS expr .)
    MINUS           reduce using rule 111 (numerical_expr -> MINUS expr .)
    TIMES           reduce using rule 111 (numerical_expr -> MINUS expr .)
    DIV             reduce using rule 111 (numerical_expr -> MINUS expr .)
    RPAREN          reduce using rule 111 (numerical_expr -> MINUS expr .)
    RBRACK          reduce using rule 111 (numerical_expr -> MINUS expr .)
    COMMA           reduce using rule 111 (numerical_expr -> MINUS expr .)
    ELSE            reduce using rule 111 (numerical_expr -> MINUS expr .)
    RCURLY          reduce using rule 111 (numerical_expr -> MINUS expr .)

  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]
  ! TIMES           [ shift and go to state 214 ]
  ! DIV             [ shift and go to state 215 ]


state 226

    (116) control_expr -> IF LPAREN . expr RPAREN THEN expr ELSE expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 313
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 227

    (117) control_expr -> SWITCH LPAREN . term RPAREN LCURLY case_list RCURLY
    (74) term -> . VAR
    (75) term -> . ENUM_VAL
    (76) term -> . pvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT

    VAR             shift and go to state 303
    ENUM_VAL        shift and go to state 304
    IDENT           shift and go to state 199

    term                           shift and go to state 314
    pvar_expr                      shift and go to state 305

state 228

    (118) randomvar_expr -> BERNOULLI LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 315
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 229

    (119) randomvar_expr -> DIRAC_DELTA LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 316
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 230

    (120) randomvar_expr -> KRON_DELTA LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 317
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 231

    (121) randomvar_expr -> UNIFORM LPAREN . expr COMMA expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 318
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 232

    (122) randomvar_expr -> NORMAL LPAREN . expr COMMA expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 319
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 233

    (123) randomvar_expr -> EXPONENTIAL LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 320
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 234

    (124) randomvar_expr -> DISCRETE LPAREN . IDENT COMMA lconst_case_list RPAREN

    IDENT           shift and go to state 321


state 235

    (125) randomvar_expr -> DIRICHLET LPAREN . IDENT COMMA expr RPAREN

    IDENT           shift and go to state 322


state 236

    (126) randomvar_expr -> POISSON LPAREN . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 323
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 237

    (127) randomvar_expr -> WEIBULL LPAREN . expr COMMA expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 324
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 238

    (128) randomvar_expr -> GAMMA LPAREN . expr COMMA expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 325
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 239

    (51) termination_section -> TERMINATION LCURLY termination_list RCURLY . SEMI

    SEMI            shift and go to state 326


state 240

    (53) termination_list -> termination_list termination_cond_def .

    RCURLY          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    IDENT           reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    LBRACK          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    LPAREN          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    NOT             reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    FORALL          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    EXISTS          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    MINUS           reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    PLUS            reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    INTEGER         reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    DOUBLE          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    IF              reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    SWITCH          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    BERNOULLI       reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    DIRAC_DELTA     reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    KRON_DELTA      reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    UNIFORM         reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    NORMAL          reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    EXPONENTIAL     reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    DISCRETE        reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    DIRICHLET       reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    POISSON         reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    WEIBULL         reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    GAMMA           reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    TRUE            reduce using rule 53 (termination_list -> termination_list termination_cond_def .)
    FALSE           reduce using rule 53 (termination_list -> termination_list termination_cond_def .)


state 241

    (52) termination_section -> TERMINATION LCURLY RCURLY SEMI .

    RCURLY          reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    TYPES           reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    PVARIABLES      reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    REWARD          reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    TERMINATION     reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    CPFS            reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)
    CDFS            reduce using rule 52 (termination_section -> TERMINATION LCURLY RCURLY SEMI .)


state 242

    (55) termination_cond_def -> expr SEMI .

    RCURLY          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    IDENT           reduce using rule 55 (termination_cond_def -> expr SEMI .)
    LBRACK          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    LPAREN          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    NOT             reduce using rule 55 (termination_cond_def -> expr SEMI .)
    FORALL          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    EXISTS          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    MINUS           reduce using rule 55 (termination_cond_def -> expr SEMI .)
    PLUS            reduce using rule 55 (termination_cond_def -> expr SEMI .)
    INTEGER         reduce using rule 55 (termination_cond_def -> expr SEMI .)
    DOUBLE          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    IF              reduce using rule 55 (termination_cond_def -> expr SEMI .)
    SWITCH          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    BERNOULLI       reduce using rule 55 (termination_cond_def -> expr SEMI .)
    DIRAC_DELTA     reduce using rule 55 (termination_cond_def -> expr SEMI .)
    KRON_DELTA      reduce using rule 55 (termination_cond_def -> expr SEMI .)
    UNIFORM         reduce using rule 55 (termination_cond_def -> expr SEMI .)
    NORMAL          reduce using rule 55 (termination_cond_def -> expr SEMI .)
    EXPONENTIAL     reduce using rule 55 (termination_cond_def -> expr SEMI .)
    DISCRETE        reduce using rule 55 (termination_cond_def -> expr SEMI .)
    DIRICHLET       reduce using rule 55 (termination_cond_def -> expr SEMI .)
    POISSON         reduce using rule 55 (termination_cond_def -> expr SEMI .)
    WEIBULL         reduce using rule 55 (termination_cond_def -> expr SEMI .)
    GAMMA           reduce using rule 55 (termination_cond_def -> expr SEMI .)
    TRUE            reduce using rule 55 (termination_cond_def -> expr SEMI .)
    FALSE           reduce using rule 55 (termination_cond_def -> expr SEMI .)


state 243

    (56) action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY . SEMI

    SEMI            shift and go to state 327


state 244

    (58) action_precond_list -> action_precond_list action_precond_def .

    RCURLY          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    IDENT           reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    LBRACK          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    LPAREN          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    NOT             reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    FORALL          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    EXISTS          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    MINUS           reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    PLUS            reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    INTEGER         reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    DOUBLE          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    IF              reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    SWITCH          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    BERNOULLI       reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    DIRAC_DELTA     reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    KRON_DELTA      reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    UNIFORM         reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    NORMAL          reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    EXPONENTIAL     reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    DISCRETE        reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    DIRICHLET       reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    POISSON         reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    WEIBULL         reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    GAMMA           reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    TRUE            reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)
    FALSE           reduce using rule 58 (action_precond_list -> action_precond_list action_precond_def .)


state 245

    (57) action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .

    RCURLY          reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    TYPES           reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    PVARIABLES      reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    REWARD          reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    TERMINATION     reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    CPFS            reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)
    CDFS            reduce using rule 57 (action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI .)


state 246

    (60) action_precond_def -> expr SEMI .

    RCURLY          reduce using rule 60 (action_precond_def -> expr SEMI .)
    IDENT           reduce using rule 60 (action_precond_def -> expr SEMI .)
    LBRACK          reduce using rule 60 (action_precond_def -> expr SEMI .)
    LPAREN          reduce using rule 60 (action_precond_def -> expr SEMI .)
    NOT             reduce using rule 60 (action_precond_def -> expr SEMI .)
    FORALL          reduce using rule 60 (action_precond_def -> expr SEMI .)
    EXISTS          reduce using rule 60 (action_precond_def -> expr SEMI .)
    MINUS           reduce using rule 60 (action_precond_def -> expr SEMI .)
    PLUS            reduce using rule 60 (action_precond_def -> expr SEMI .)
    INTEGER         reduce using rule 60 (action_precond_def -> expr SEMI .)
    DOUBLE          reduce using rule 60 (action_precond_def -> expr SEMI .)
    IF              reduce using rule 60 (action_precond_def -> expr SEMI .)
    SWITCH          reduce using rule 60 (action_precond_def -> expr SEMI .)
    BERNOULLI       reduce using rule 60 (action_precond_def -> expr SEMI .)
    DIRAC_DELTA     reduce using rule 60 (action_precond_def -> expr SEMI .)
    KRON_DELTA      reduce using rule 60 (action_precond_def -> expr SEMI .)
    UNIFORM         reduce using rule 60 (action_precond_def -> expr SEMI .)
    NORMAL          reduce using rule 60 (action_precond_def -> expr SEMI .)
    EXPONENTIAL     reduce using rule 60 (action_precond_def -> expr SEMI .)
    DISCRETE        reduce using rule 60 (action_precond_def -> expr SEMI .)
    DIRICHLET       reduce using rule 60 (action_precond_def -> expr SEMI .)
    POISSON         reduce using rule 60 (action_precond_def -> expr SEMI .)
    WEIBULL         reduce using rule 60 (action_precond_def -> expr SEMI .)
    GAMMA           reduce using rule 60 (action_precond_def -> expr SEMI .)
    TRUE            reduce using rule 60 (action_precond_def -> expr SEMI .)
    FALSE           reduce using rule 60 (action_precond_def -> expr SEMI .)


state 247

    (61) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY . SEMI

    SEMI            shift and go to state 328


state 248

    (63) state_cons_list -> state_cons_list state_cons_def .

    RCURLY          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    IDENT           reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    LBRACK          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    LPAREN          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    NOT             reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    FORALL          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    EXISTS          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    MINUS           reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    PLUS            reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    INTEGER         reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    DOUBLE          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    IF              reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    SWITCH          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    BERNOULLI       reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    DIRAC_DELTA     reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    KRON_DELTA      reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    UNIFORM         reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    NORMAL          reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    EXPONENTIAL     reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    DISCRETE        reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    DIRICHLET       reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    POISSON         reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    WEIBULL         reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    GAMMA           reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    TRUE            reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)
    FALSE           reduce using rule 63 (state_cons_list -> state_cons_list state_cons_def .)


state 249

    (62) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .

    RCURLY          reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    TYPES           reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    PVARIABLES      reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    REWARD          reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    TERMINATION     reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    CPFS            reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)
    CDFS            reduce using rule 62 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI .)


state 250

    (65) state_cons_def -> expr SEMI .

    RCURLY          reduce using rule 65 (state_cons_def -> expr SEMI .)
    IDENT           reduce using rule 65 (state_cons_def -> expr SEMI .)
    LBRACK          reduce using rule 65 (state_cons_def -> expr SEMI .)
    LPAREN          reduce using rule 65 (state_cons_def -> expr SEMI .)
    NOT             reduce using rule 65 (state_cons_def -> expr SEMI .)
    FORALL          reduce using rule 65 (state_cons_def -> expr SEMI .)
    EXISTS          reduce using rule 65 (state_cons_def -> expr SEMI .)
    MINUS           reduce using rule 65 (state_cons_def -> expr SEMI .)
    PLUS            reduce using rule 65 (state_cons_def -> expr SEMI .)
    INTEGER         reduce using rule 65 (state_cons_def -> expr SEMI .)
    DOUBLE          reduce using rule 65 (state_cons_def -> expr SEMI .)
    IF              reduce using rule 65 (state_cons_def -> expr SEMI .)
    SWITCH          reduce using rule 65 (state_cons_def -> expr SEMI .)
    BERNOULLI       reduce using rule 65 (state_cons_def -> expr SEMI .)
    DIRAC_DELTA     reduce using rule 65 (state_cons_def -> expr SEMI .)
    KRON_DELTA      reduce using rule 65 (state_cons_def -> expr SEMI .)
    UNIFORM         reduce using rule 65 (state_cons_def -> expr SEMI .)
    NORMAL          reduce using rule 65 (state_cons_def -> expr SEMI .)
    EXPONENTIAL     reduce using rule 65 (state_cons_def -> expr SEMI .)
    DISCRETE        reduce using rule 65 (state_cons_def -> expr SEMI .)
    DIRICHLET       reduce using rule 65 (state_cons_def -> expr SEMI .)
    POISSON         reduce using rule 65 (state_cons_def -> expr SEMI .)
    WEIBULL         reduce using rule 65 (state_cons_def -> expr SEMI .)
    GAMMA           reduce using rule 65 (state_cons_def -> expr SEMI .)
    TRUE            reduce using rule 65 (state_cons_def -> expr SEMI .)
    FALSE           reduce using rule 65 (state_cons_def -> expr SEMI .)


state 251

    (66) state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY . SEMI

    SEMI            shift and go to state 329


state 252

    (68) state_invariant_list -> state_invariant_list state_invariant_def .

    RCURLY          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    IDENT           reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    LBRACK          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    LPAREN          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    NOT             reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    FORALL          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    EXISTS          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    MINUS           reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    PLUS            reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    INTEGER         reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    DOUBLE          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    IF              reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    SWITCH          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    BERNOULLI       reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    DIRAC_DELTA     reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    KRON_DELTA      reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    UNIFORM         reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    NORMAL          reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    EXPONENTIAL     reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    DISCRETE        reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    DIRICHLET       reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    POISSON         reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    WEIBULL         reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    GAMMA           reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    TRUE            reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)
    FALSE           reduce using rule 68 (state_invariant_list -> state_invariant_list state_invariant_def .)


state 253

    (67) state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .

    RCURLY          reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    TYPES           reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    PVARIABLES      reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    REWARD          reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    TERMINATION     reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    CPFS            reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)
    CDFS            reduce using rule 67 (state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI .)


state 254

    (70) state_invariant_def -> expr SEMI .

    RCURLY          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    IDENT           reduce using rule 70 (state_invariant_def -> expr SEMI .)
    LBRACK          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    LPAREN          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    NOT             reduce using rule 70 (state_invariant_def -> expr SEMI .)
    FORALL          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    EXISTS          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    MINUS           reduce using rule 70 (state_invariant_def -> expr SEMI .)
    PLUS            reduce using rule 70 (state_invariant_def -> expr SEMI .)
    INTEGER         reduce using rule 70 (state_invariant_def -> expr SEMI .)
    DOUBLE          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    IF              reduce using rule 70 (state_invariant_def -> expr SEMI .)
    SWITCH          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    BERNOULLI       reduce using rule 70 (state_invariant_def -> expr SEMI .)
    DIRAC_DELTA     reduce using rule 70 (state_invariant_def -> expr SEMI .)
    KRON_DELTA      reduce using rule 70 (state_invariant_def -> expr SEMI .)
    UNIFORM         reduce using rule 70 (state_invariant_def -> expr SEMI .)
    NORMAL          reduce using rule 70 (state_invariant_def -> expr SEMI .)
    EXPONENTIAL     reduce using rule 70 (state_invariant_def -> expr SEMI .)
    DISCRETE        reduce using rule 70 (state_invariant_def -> expr SEMI .)
    DIRICHLET       reduce using rule 70 (state_invariant_def -> expr SEMI .)
    POISSON         reduce using rule 70 (state_invariant_def -> expr SEMI .)
    WEIBULL         reduce using rule 70 (state_invariant_def -> expr SEMI .)
    GAMMA           reduce using rule 70 (state_invariant_def -> expr SEMI .)
    TRUE            reduce using rule 70 (state_invariant_def -> expr SEMI .)
    FALSE           reduce using rule 70 (state_invariant_def -> expr SEMI .)


state 255

    (7) req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .

    RCURLY          reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    TYPES           reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    REWARD          reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    TERMINATION     reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    CPFS            reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)
    CDFS            reduce using rule 7 (req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI .)


state 256

    (176) objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .

    RCURLY          reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    DOMAIN          reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    NON_FLUENTS     reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    OBJECTS         reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    INIT_STATE      reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    HORIZON         reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)
    DISCOUNT        reduce using rule 176 (objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI .)


state 257

    (191) objects_def -> IDENT COLON LCURLY . object_const_list RCURLY SEMI
    (192) object_const_list -> . object_const_list COMMA IDENT
    (193) object_const_list -> . IDENT

    IDENT           shift and go to state 330

    object_const_list              shift and go to state 331

state 258

    (177) init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .

    RCURLY          reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    DOMAIN          reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    NON_FLUENTS     reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    OBJECTS         reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    INIT_STATE      reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    MAX_NONDEF_ACTIONS reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    HORIZON         reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)
    DISCOUNT        reduce using rule 177 (init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI .)


state 259

    (141) lconst -> IDENT .

    RPAREN          reduce using rule 141 (lconst -> IDENT .)
    COMMA           reduce using rule 141 (lconst -> IDENT .)
    COLON           reduce using rule 141 (lconst -> IDENT .)


state 260

    (196) pvar_inst_def -> IDENT LPAREN lconst_list . RPAREN SEMI
    (200) pvar_inst_def -> IDENT LPAREN lconst_list . RPAREN ASSIGN_EQUAL range_const SEMI
    (202) lconst_list -> lconst_list . COMMA lconst

    RPAREN          shift and go to state 332
    COMMA           shift and go to state 333


state 261

    (203) lconst_list -> lconst .

    RPAREN          reduce using rule 203 (lconst_list -> lconst .)
    COMMA           reduce using rule 203 (lconst_list -> lconst .)


state 262

    (142) lconst -> ENUM_VAL .

    RPAREN          reduce using rule 142 (lconst -> ENUM_VAL .)
    COMMA           reduce using rule 142 (lconst -> ENUM_VAL .)
    COLON           reduce using rule 142 (lconst -> ENUM_VAL .)


state 263

    (154) range_const -> IDENT .

    SEMI            reduce using rule 154 (range_const -> IDENT .)
    RCURLY          reduce using rule 154 (range_const -> IDENT .)


state 264

    (201) pvar_inst_def -> IDENT ASSIGN_EQUAL range_const . SEMI

    SEMI            shift and go to state 334


state 265

    (151) range_const -> bool_type .

    SEMI            reduce using rule 151 (range_const -> bool_type .)
    RCURLY          reduce using rule 151 (range_const -> bool_type .)


state 266

    (152) range_const -> double_type .

    SEMI            reduce using rule 152 (range_const -> double_type .)
    RCURLY          reduce using rule 152 (range_const -> double_type .)


state 267

    (153) range_const -> int_type .

    SEMI            reduce using rule 153 (range_const -> int_type .)
    RCURLY          reduce using rule 153 (range_const -> int_type .)


state 268

    (157) double_type -> DOUBLE .

    SEMI            reduce using rule 157 (double_type -> DOUBLE .)
    RCURLY          reduce using rule 157 (double_type -> DOUBLE .)


state 269

    (158) double_type -> MINUS . DOUBLE
    (162) int_type -> MINUS . INTEGER

    DOUBLE          shift and go to state 335
    INTEGER         shift and go to state 336


state 270

    (159) double_type -> POS_INF .

    SEMI            reduce using rule 159 (double_type -> POS_INF .)
    RCURLY          reduce using rule 159 (double_type -> POS_INF .)


state 271

    (160) double_type -> NEG_INF .

    SEMI            reduce using rule 160 (double_type -> NEG_INF .)
    RCURLY          reduce using rule 160 (double_type -> NEG_INF .)


state 272

    (161) int_type -> INTEGER .

    SEMI            reduce using rule 161 (int_type -> INTEGER .)
    RCURLY          reduce using rule 161 (int_type -> INTEGER .)


state 273

    (198) pvar_inst_def -> NOT IDENT LPAREN . lconst_list RPAREN SEMI
    (202) lconst_list -> . lconst_list COMMA lconst
    (203) lconst_list -> . lconst
    (141) lconst -> . IDENT
    (142) lconst -> . ENUM_VAL

    IDENT           shift and go to state 259
    ENUM_VAL        shift and go to state 262

    lconst_list                    shift and go to state 337
    lconst                         shift and go to state 261

state 274

    (199) pvar_inst_def -> NOT IDENT SEMI .

    RCURLY          reduce using rule 199 (pvar_inst_def -> NOT IDENT SEMI .)
    IDENT           reduce using rule 199 (pvar_inst_def -> NOT IDENT SEMI .)
    NOT             reduce using rule 199 (pvar_inst_def -> NOT IDENT SEMI .)


state 275

    (180) horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 338
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 276

    (187) init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI .

    RCURLY          reduce using rule 187 (init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI .)
    DOMAIN          reduce using rule 187 (init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI .)
    OBJECTS         reduce using rule 187 (init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI .)
    NON_FLUENTS     reduce using rule 187 (init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI .)


state 277

    (19) type_section -> TYPES LCURLY type_list RCURLY SEMI .

    RCURLY          reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    TYPES           reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    REWARD          reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    TERMINATION     reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    CPFS            reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)
    CDFS            reduce using rule 19 (type_section -> TYPES LCURLY type_list RCURLY SEMI .)


state 278

    (22) type_def -> IDENT COLON . OBJECT SEMI
    (23) type_def -> IDENT COLON . LCURLY enum_list RCURLY SEMI

    OBJECT          shift and go to state 339
    LCURLY          shift and go to state 340


state 279

    (27) pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .

    RCURLY          reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    TYPES           reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    REWARD          reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    TERMINATION     reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    CPFS            reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)
    CDFS            reduce using rule 27 (pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI .)


state 280

    (36) nonfluent_def -> IDENT param_list . LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (37) statefluent_def -> IDENT param_list . LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (38) actionfluent_def -> IDENT param_list . LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (39) intermfluent_def -> IDENT param_list . LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT param_list . LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI
    (41) derivedfluent_def -> IDENT param_list . LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT param_list . LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI
    (43) observfluent_def -> IDENT param_list . LCURLY OBSERVATION COMMA type_spec RCURLY SEMI

    LCURLY          shift and go to state 341


state 281

    (143) param_list -> COLON .

    LCURLY          reduce using rule 143 (param_list -> COLON .)


state 282

    (144) param_list -> LPAREN . param_list2 RPAREN COLON
    (145) param_list2 -> . type_spec
    (146) param_list2 -> . param_list2 COMMA type_spec
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    param_list2                    shift and go to state 342
    type_spec                      shift and go to state 343

state 283

    (44) cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .

    RCURLY          reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    TYPES           reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    REWARD          reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    TERMINATION     reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    CPFS            reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)
    CDFS            reduce using rule 44 (cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI .)


state 284

    (49) cpf_def -> pvar_expr ASSIGN_EQUAL . expr SEMI
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    pvar_expr                      shift and go to state 113
    expr                           shift and go to state 348
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 285

    (92) relational_expr -> expr COMP_EQUAL expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    COMP_EQUAL      reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    NEQ             reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    GREATER         reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    GREATEREQ       reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    LESS            reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    LESSEQ          reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    AND             reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    AMPERSAND       reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    OR              reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    IMPLY           reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    EQUIV           reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    RPAREN          reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    RBRACK          reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    COMMA           reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    ELSE            reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    RCURLY          reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .) ]
  ! DIV             [ reduce using rule 92 (relational_expr -> expr COMP_EQUAL expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 286

    (93) relational_expr -> expr NEQ expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 93 (relational_expr -> expr NEQ expr .)
    COMP_EQUAL      reduce using rule 93 (relational_expr -> expr NEQ expr .)
    NEQ             reduce using rule 93 (relational_expr -> expr NEQ expr .)
    GREATER         reduce using rule 93 (relational_expr -> expr NEQ expr .)
    GREATEREQ       reduce using rule 93 (relational_expr -> expr NEQ expr .)
    LESS            reduce using rule 93 (relational_expr -> expr NEQ expr .)
    LESSEQ          reduce using rule 93 (relational_expr -> expr NEQ expr .)
    AND             reduce using rule 93 (relational_expr -> expr NEQ expr .)
    AMPERSAND       reduce using rule 93 (relational_expr -> expr NEQ expr .)
    OR              reduce using rule 93 (relational_expr -> expr NEQ expr .)
    IMPLY           reduce using rule 93 (relational_expr -> expr NEQ expr .)
    EQUIV           reduce using rule 93 (relational_expr -> expr NEQ expr .)
    RPAREN          reduce using rule 93 (relational_expr -> expr NEQ expr .)
    RBRACK          reduce using rule 93 (relational_expr -> expr NEQ expr .)
    COMMA           reduce using rule 93 (relational_expr -> expr NEQ expr .)
    ELSE            reduce using rule 93 (relational_expr -> expr NEQ expr .)
    RCURLY          reduce using rule 93 (relational_expr -> expr NEQ expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 93 (relational_expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 93 (relational_expr -> expr NEQ expr .) ]
  ! TIMES           [ reduce using rule 93 (relational_expr -> expr NEQ expr .) ]
  ! DIV             [ reduce using rule 93 (relational_expr -> expr NEQ expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 287

    (94) relational_expr -> expr GREATER expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 94 (relational_expr -> expr GREATER expr .)
    COMP_EQUAL      reduce using rule 94 (relational_expr -> expr GREATER expr .)
    NEQ             reduce using rule 94 (relational_expr -> expr GREATER expr .)
    GREATER         reduce using rule 94 (relational_expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 94 (relational_expr -> expr GREATER expr .)
    LESS            reduce using rule 94 (relational_expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 94 (relational_expr -> expr GREATER expr .)
    AND             reduce using rule 94 (relational_expr -> expr GREATER expr .)
    AMPERSAND       reduce using rule 94 (relational_expr -> expr GREATER expr .)
    OR              reduce using rule 94 (relational_expr -> expr GREATER expr .)
    IMPLY           reduce using rule 94 (relational_expr -> expr GREATER expr .)
    EQUIV           reduce using rule 94 (relational_expr -> expr GREATER expr .)
    RPAREN          reduce using rule 94 (relational_expr -> expr GREATER expr .)
    RBRACK          reduce using rule 94 (relational_expr -> expr GREATER expr .)
    COMMA           reduce using rule 94 (relational_expr -> expr GREATER expr .)
    ELSE            reduce using rule 94 (relational_expr -> expr GREATER expr .)
    RCURLY          reduce using rule 94 (relational_expr -> expr GREATER expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 94 (relational_expr -> expr GREATER expr .) ]
  ! MINUS           [ reduce using rule 94 (relational_expr -> expr GREATER expr .) ]
  ! TIMES           [ reduce using rule 94 (relational_expr -> expr GREATER expr .) ]
  ! DIV             [ reduce using rule 94 (relational_expr -> expr GREATER expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 288

    (95) relational_expr -> expr GREATEREQ expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    COMP_EQUAL      reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    NEQ             reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    AND             reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    AMPERSAND       reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    OR              reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    IMPLY           reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    EQUIV           reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    RPAREN          reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    RBRACK          reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    COMMA           reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    ELSE            reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    RCURLY          reduce using rule 95 (relational_expr -> expr GREATEREQ expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 95 (relational_expr -> expr GREATEREQ expr .) ]
  ! MINUS           [ reduce using rule 95 (relational_expr -> expr GREATEREQ expr .) ]
  ! TIMES           [ reduce using rule 95 (relational_expr -> expr GREATEREQ expr .) ]
  ! DIV             [ reduce using rule 95 (relational_expr -> expr GREATEREQ expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 289

    (96) relational_expr -> expr LESS expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 96 (relational_expr -> expr LESS expr .)
    COMP_EQUAL      reduce using rule 96 (relational_expr -> expr LESS expr .)
    NEQ             reduce using rule 96 (relational_expr -> expr LESS expr .)
    GREATER         reduce using rule 96 (relational_expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 96 (relational_expr -> expr LESS expr .)
    LESS            reduce using rule 96 (relational_expr -> expr LESS expr .)
    LESSEQ          reduce using rule 96 (relational_expr -> expr LESS expr .)
    AND             reduce using rule 96 (relational_expr -> expr LESS expr .)
    AMPERSAND       reduce using rule 96 (relational_expr -> expr LESS expr .)
    OR              reduce using rule 96 (relational_expr -> expr LESS expr .)
    IMPLY           reduce using rule 96 (relational_expr -> expr LESS expr .)
    EQUIV           reduce using rule 96 (relational_expr -> expr LESS expr .)
    RPAREN          reduce using rule 96 (relational_expr -> expr LESS expr .)
    RBRACK          reduce using rule 96 (relational_expr -> expr LESS expr .)
    COMMA           reduce using rule 96 (relational_expr -> expr LESS expr .)
    ELSE            reduce using rule 96 (relational_expr -> expr LESS expr .)
    RCURLY          reduce using rule 96 (relational_expr -> expr LESS expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 96 (relational_expr -> expr LESS expr .) ]
  ! MINUS           [ reduce using rule 96 (relational_expr -> expr LESS expr .) ]
  ! TIMES           [ reduce using rule 96 (relational_expr -> expr LESS expr .) ]
  ! DIV             [ reduce using rule 96 (relational_expr -> expr LESS expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 290

    (97) relational_expr -> expr LESSEQ expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    COMP_EQUAL      reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    NEQ             reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    LESS            reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    AND             reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    AMPERSAND       reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    OR              reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    IMPLY           reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    EQUIV           reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    RPAREN          reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    RBRACK          reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    COMMA           reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    ELSE            reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    RCURLY          reduce using rule 97 (relational_expr -> expr LESSEQ expr .)
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! PLUS            [ reduce using rule 97 (relational_expr -> expr LESSEQ expr .) ]
  ! MINUS           [ reduce using rule 97 (relational_expr -> expr LESSEQ expr .) ]
  ! TIMES           [ reduce using rule 97 (relational_expr -> expr LESSEQ expr .) ]
  ! DIV             [ reduce using rule 97 (relational_expr -> expr LESSEQ expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 291

    (98) boolean_expr -> expr AND expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 98 (boolean_expr -> expr AND expr .)
    AND             reduce using rule 98 (boolean_expr -> expr AND expr .)
    AMPERSAND       reduce using rule 98 (boolean_expr -> expr AND expr .)
    OR              reduce using rule 98 (boolean_expr -> expr AND expr .)
    IMPLY           reduce using rule 98 (boolean_expr -> expr AND expr .)
    EQUIV           reduce using rule 98 (boolean_expr -> expr AND expr .)
    RPAREN          reduce using rule 98 (boolean_expr -> expr AND expr .)
    RBRACK          reduce using rule 98 (boolean_expr -> expr AND expr .)
    COMMA           reduce using rule 98 (boolean_expr -> expr AND expr .)
    ELSE            reduce using rule 98 (boolean_expr -> expr AND expr .)
    RCURLY          reduce using rule 98 (boolean_expr -> expr AND expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! GREATER         [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! GREATEREQ       [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! LESS            [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! LESSEQ          [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 98 (boolean_expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 292

    (99) boolean_expr -> expr AMPERSAND expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    AND             reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    AMPERSAND       reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    OR              reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    IMPLY           reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    EQUIV           reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    RPAREN          reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    RBRACK          reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    COMMA           reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    ELSE            reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    RCURLY          reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! NEQ             [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! GREATER         [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! GREATEREQ       [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! LESS            [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! LESSEQ          [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! PLUS            [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! MINUS           [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! TIMES           [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! DIV             [ reduce using rule 99 (boolean_expr -> expr AMPERSAND expr .) ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 293

    (100) boolean_expr -> expr OR expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 100 (boolean_expr -> expr OR expr .)
    OR              reduce using rule 100 (boolean_expr -> expr OR expr .)
    IMPLY           reduce using rule 100 (boolean_expr -> expr OR expr .)
    EQUIV           reduce using rule 100 (boolean_expr -> expr OR expr .)
    RPAREN          reduce using rule 100 (boolean_expr -> expr OR expr .)
    RBRACK          reduce using rule 100 (boolean_expr -> expr OR expr .)
    COMMA           reduce using rule 100 (boolean_expr -> expr OR expr .)
    ELSE            reduce using rule 100 (boolean_expr -> expr OR expr .)
    RCURLY          reduce using rule 100 (boolean_expr -> expr OR expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! GREATER         [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! GREATEREQ       [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! LESS            [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! LESSEQ          [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! AMPERSAND       [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 100 (boolean_expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 294

    (101) boolean_expr -> expr IMPLY expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    IMPLY           reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    EQUIV           reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    RPAREN          reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    RBRACK          reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    COMMA           reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    ELSE            reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    RCURLY          reduce using rule 101 (boolean_expr -> expr IMPLY expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! NEQ             [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! GREATER         [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! GREATEREQ       [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! LESS            [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! LESSEQ          [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! AND             [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! AMPERSAND       [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! OR              [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! PLUS            [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! MINUS           [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! TIMES           [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! DIV             [ reduce using rule 101 (boolean_expr -> expr IMPLY expr .) ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]


state 295

    (102) boolean_expr -> expr EQUIV expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    EQUIV           reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    RPAREN          reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    RBRACK          reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    COMMA           reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    ELSE            reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    RCURLY          reduce using rule 102 (boolean_expr -> expr EQUIV expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! NEQ             [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! GREATER         [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! GREATEREQ       [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! LESS            [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! LESSEQ          [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! AND             [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! AMPERSAND       [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! OR              [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! IMPLY           [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! PLUS            [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! MINUS           [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! TIMES           [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! DIV             [ reduce using rule 102 (boolean_expr -> expr EQUIV expr .) ]
  ! EQUIV           [ shift and go to state 211 ]


state 296

    (107) numerical_expr -> expr PLUS expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    COMP_EQUAL      reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    NEQ             reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    GREATER         reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    GREATEREQ       reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    LESS            reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    LESSEQ          reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    AND             reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    AMPERSAND       reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    OR              reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    IMPLY           reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    EQUIV           reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    PLUS            reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    MINUS           reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    RPAREN          reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    RBRACK          reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    COMMA           reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    ELSE            reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    RCURLY          reduce using rule 107 (numerical_expr -> expr PLUS expr .)
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! TIMES           [ reduce using rule 107 (numerical_expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 107 (numerical_expr -> expr PLUS expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]


state 297

    (108) numerical_expr -> expr MINUS expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    COMP_EQUAL      reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    NEQ             reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    GREATER         reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    GREATEREQ       reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    LESS            reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    LESSEQ          reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    AND             reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    AMPERSAND       reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    OR              reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    IMPLY           reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    EQUIV           reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    PLUS            reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    MINUS           reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    RPAREN          reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    RBRACK          reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    COMMA           reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    ELSE            reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    RCURLY          reduce using rule 108 (numerical_expr -> expr MINUS expr .)
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! TIMES           [ reduce using rule 108 (numerical_expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 108 (numerical_expr -> expr MINUS expr .) ]
  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]


state 298

    (109) numerical_expr -> expr TIMES expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    COMP_EQUAL      reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    NEQ             reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    GREATER         reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    GREATEREQ       reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    LESS            reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    LESSEQ          reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    AND             reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    AMPERSAND       reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    OR              reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    IMPLY           reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    EQUIV           reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    PLUS            reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    MINUS           reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    TIMES           reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    DIV             reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    RPAREN          reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    RBRACK          reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    COMMA           reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    ELSE            reduce using rule 109 (numerical_expr -> expr TIMES expr .)
    RCURLY          reduce using rule 109 (numerical_expr -> expr TIMES expr .)

  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]
  ! TIMES           [ shift and go to state 214 ]
  ! DIV             [ shift and go to state 215 ]


state 299

    (110) numerical_expr -> expr DIV expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 110 (numerical_expr -> expr DIV expr .)
    COMP_EQUAL      reduce using rule 110 (numerical_expr -> expr DIV expr .)
    NEQ             reduce using rule 110 (numerical_expr -> expr DIV expr .)
    GREATER         reduce using rule 110 (numerical_expr -> expr DIV expr .)
    GREATEREQ       reduce using rule 110 (numerical_expr -> expr DIV expr .)
    LESS            reduce using rule 110 (numerical_expr -> expr DIV expr .)
    LESSEQ          reduce using rule 110 (numerical_expr -> expr DIV expr .)
    AND             reduce using rule 110 (numerical_expr -> expr DIV expr .)
    AMPERSAND       reduce using rule 110 (numerical_expr -> expr DIV expr .)
    OR              reduce using rule 110 (numerical_expr -> expr DIV expr .)
    IMPLY           reduce using rule 110 (numerical_expr -> expr DIV expr .)
    EQUIV           reduce using rule 110 (numerical_expr -> expr DIV expr .)
    PLUS            reduce using rule 110 (numerical_expr -> expr DIV expr .)
    MINUS           reduce using rule 110 (numerical_expr -> expr DIV expr .)
    TIMES           reduce using rule 110 (numerical_expr -> expr DIV expr .)
    DIV             reduce using rule 110 (numerical_expr -> expr DIV expr .)
    RPAREN          reduce using rule 110 (numerical_expr -> expr DIV expr .)
    RBRACK          reduce using rule 110 (numerical_expr -> expr DIV expr .)
    COMMA           reduce using rule 110 (numerical_expr -> expr DIV expr .)
    ELSE            reduce using rule 110 (numerical_expr -> expr DIV expr .)
    RCURLY          reduce using rule 110 (numerical_expr -> expr DIV expr .)

  ! COMP_EQUAL      [ shift and go to state 201 ]
  ! NEQ             [ shift and go to state 202 ]
  ! GREATER         [ shift and go to state 203 ]
  ! GREATEREQ       [ shift and go to state 204 ]
  ! LESS            [ shift and go to state 205 ]
  ! LESSEQ          [ shift and go to state 206 ]
  ! AND             [ shift and go to state 207 ]
  ! AMPERSAND       [ shift and go to state 208 ]
  ! OR              [ shift and go to state 209 ]
  ! IMPLY           [ shift and go to state 210 ]
  ! EQUIV           [ shift and go to state 211 ]
  ! PLUS            [ shift and go to state 212 ]
  ! MINUS           [ shift and go to state 213 ]
  ! TIMES           [ shift and go to state 214 ]
  ! DIV             [ shift and go to state 215 ]


state 300

    (87) pvar_expr -> IDENT LPAREN term_list . RPAREN
    (71) term_list -> term_list . COMMA term

    RPAREN          shift and go to state 349
    COMMA           shift and go to state 350


state 301

    (72) term_list -> term .

    RPAREN          reduce using rule 72 (term_list -> term .)
    COMMA           reduce using rule 72 (term_list -> term .)


state 302

    (73) term_list -> empty .

    RPAREN          reduce using rule 73 (term_list -> empty .)
    COMMA           reduce using rule 73 (term_list -> empty .)


state 303

    (74) term -> VAR .

    RPAREN          reduce using rule 74 (term -> VAR .)
    COMMA           reduce using rule 74 (term -> VAR .)
    COLON           reduce using rule 74 (term -> VAR .)


state 304

    (75) term -> ENUM_VAL .

    RPAREN          reduce using rule 75 (term -> ENUM_VAL .)
    COMMA           reduce using rule 75 (term -> ENUM_VAL .)
    COLON           reduce using rule 75 (term -> ENUM_VAL .)


state 305

    (76) term -> pvar_expr .

    RPAREN          reduce using rule 76 (term -> pvar_expr .)
    COMMA           reduce using rule 76 (term -> pvar_expr .)
    COLON           reduce using rule 76 (term -> pvar_expr .)


state 306

    (91) function_expr -> IDENT LBRACK expr_list . RBRACK
    (132) expr_list -> expr_list . COMMA expr

    RBRACK          shift and go to state 351
    COMMA           shift and go to state 352


state 307

    (133) expr_list -> expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RBRACK          reduce using rule 133 (expr_list -> expr .)
    COMMA           reduce using rule 133 (expr_list -> expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 308

    (115) aggregation_expr -> IDENT UNDERSCORE LCURLY . typed_var_list RCURLY expr
    (129) typed_var_list -> . typed_var_list COMMA typed_var
    (130) typed_var_list -> . typed_var
    (131) typed_var -> . VAR COLON IDENT

    VAR             shift and go to state 355

    typed_var_list                 shift and go to state 353
    typed_var                      shift and go to state 354

state 309

    (90) group_expr -> LPAREN expr RPAREN .

    SEMI            reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    GREATER         reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    LESS            reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    IMPLY           reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    EQUIV           reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    RBRACK          reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)
    RCURLY          reduce using rule 90 (group_expr -> LPAREN expr RPAREN .)


state 310

    (89) group_expr -> LBRACK expr RBRACK .

    SEMI            reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    COMP_EQUAL      reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    NEQ             reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    GREATER         reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    GREATEREQ       reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    LESS            reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    LESSEQ          reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    AND             reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    AMPERSAND       reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    OR              reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    IMPLY           reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    EQUIV           reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    PLUS            reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    MINUS           reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    TIMES           reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    DIV             reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    RPAREN          reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    RBRACK          reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    COMMA           reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    ELSE            reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)
    RCURLY          reduce using rule 89 (group_expr -> LBRACK expr RBRACK .)


state 311

    (105) quantifier_expr -> FORALL UNDERSCORE LCURLY . typed_var_list RCURLY expr
    (129) typed_var_list -> . typed_var_list COMMA typed_var
    (130) typed_var_list -> . typed_var
    (131) typed_var -> . VAR COLON IDENT

    VAR             shift and go to state 355

    typed_var_list                 shift and go to state 356
    typed_var                      shift and go to state 354

state 312

    (106) quantifier_expr -> EXISTS UNDERSCORE LCURLY . typed_var_list RCURLY expr
    (129) typed_var_list -> . typed_var_list COMMA typed_var
    (130) typed_var_list -> . typed_var
    (131) typed_var -> . VAR COLON IDENT

    VAR             shift and go to state 355

    typed_var_list                 shift and go to state 357
    typed_var                      shift and go to state 354

state 313

    (116) control_expr -> IF LPAREN expr . RPAREN THEN expr ELSE expr
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 358
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 314

    (117) control_expr -> SWITCH LPAREN term . RPAREN LCURLY case_list RCURLY

    RPAREN          shift and go to state 359


state 315

    (118) randomvar_expr -> BERNOULLI LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 360
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 316

    (119) randomvar_expr -> DIRAC_DELTA LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 361
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 317

    (120) randomvar_expr -> KRON_DELTA LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 362
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 318

    (121) randomvar_expr -> UNIFORM LPAREN expr . COMMA expr RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    COMMA           shift and go to state 363
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 319

    (122) randomvar_expr -> NORMAL LPAREN expr . COMMA expr RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    COMMA           shift and go to state 364
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 320

    (123) randomvar_expr -> EXPONENTIAL LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 365
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 321

    (124) randomvar_expr -> DISCRETE LPAREN IDENT . COMMA lconst_case_list RPAREN

    COMMA           shift and go to state 366


state 322

    (125) randomvar_expr -> DIRICHLET LPAREN IDENT . COMMA expr RPAREN

    COMMA           shift and go to state 367


state 323

    (126) randomvar_expr -> POISSON LPAREN expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 368
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 324

    (127) randomvar_expr -> WEIBULL LPAREN expr . COMMA expr RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    COMMA           shift and go to state 369
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 325

    (128) randomvar_expr -> GAMMA LPAREN expr . COMMA expr RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    COMMA           shift and go to state 370
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 326

    (51) termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .

    RCURLY          reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    TYPES           reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    REWARD          reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    TERMINATION     reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    CPFS            reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)
    CDFS            reduce using rule 51 (termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI .)


state 327

    (56) action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .

    RCURLY          reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    TYPES           reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    REWARD          reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    TERMINATION     reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    CPFS            reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)
    CDFS            reduce using rule 56 (action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI .)


state 328

    (61) state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .

    RCURLY          reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    TYPES           reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    REWARD          reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    TERMINATION     reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    CPFS            reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)
    CDFS            reduce using rule 61 (state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI .)


state 329

    (66) state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .

    RCURLY          reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    TYPES           reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    PVARIABLES      reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    REWARD          reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    TERMINATION     reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    ACTION_PRECONDITIONS reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    STATE_ACTION_CONSTRAINTS reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    STATE_INVARIANTS reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    CPFS            reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)
    CDFS            reduce using rule 66 (state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI .)


state 330

    (193) object_const_list -> IDENT .

    RCURLY          reduce using rule 193 (object_const_list -> IDENT .)
    COMMA           reduce using rule 193 (object_const_list -> IDENT .)


state 331

    (191) objects_def -> IDENT COLON LCURLY object_const_list . RCURLY SEMI
    (192) object_const_list -> object_const_list . COMMA IDENT

    RCURLY          shift and go to state 371
    COMMA           shift and go to state 372


state 332

    (196) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN . SEMI
    (200) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN . ASSIGN_EQUAL range_const SEMI

    SEMI            shift and go to state 373
    ASSIGN_EQUAL    shift and go to state 374


state 333

    (202) lconst_list -> lconst_list COMMA . lconst
    (141) lconst -> . IDENT
    (142) lconst -> . ENUM_VAL

    IDENT           shift and go to state 259
    ENUM_VAL        shift and go to state 262

    lconst                         shift and go to state 375

state 334

    (201) pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI .

    RCURLY          reduce using rule 201 (pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI .)
    IDENT           reduce using rule 201 (pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI .)
    NOT             reduce using rule 201 (pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI .)


state 335

    (158) double_type -> MINUS DOUBLE .

    SEMI            reduce using rule 158 (double_type -> MINUS DOUBLE .)
    RCURLY          reduce using rule 158 (double_type -> MINUS DOUBLE .)


state 336

    (162) int_type -> MINUS INTEGER .

    SEMI            reduce using rule 162 (int_type -> MINUS INTEGER .)
    RCURLY          reduce using rule 162 (int_type -> MINUS INTEGER .)


state 337

    (198) pvar_inst_def -> NOT IDENT LPAREN lconst_list . RPAREN SEMI
    (202) lconst_list -> lconst_list . COMMA lconst

    RPAREN          shift and go to state 376
    COMMA           shift and go to state 333


state 338

    (180) horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .

    RCURLY          reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    DOMAIN          reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    NON_FLUENTS     reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    OBJECTS         reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    INIT_STATE      reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    MAX_NONDEF_ACTIONS reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    HORIZON         reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)
    DISCOUNT        reduce using rule 180 (horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN .)


state 339

    (22) type_def -> IDENT COLON OBJECT . SEMI

    SEMI            shift and go to state 377


state 340

    (23) type_def -> IDENT COLON LCURLY . enum_list RCURLY SEMI
    (24) enum_list -> . enum_list COMMA ENUM_VAL
    (25) enum_list -> . ENUM_VAL
    (26) enum_list -> . empty
    (207) empty -> .

    ENUM_VAL        shift and go to state 379
    RCURLY          reduce using rule 207 (empty -> .)
    COMMA           reduce using rule 207 (empty -> .)

    enum_list                      shift and go to state 378
    empty                          shift and go to state 380

state 341

    (36) nonfluent_def -> IDENT param_list LCURLY . NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (37) statefluent_def -> IDENT param_list LCURLY . STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (38) actionfluent_def -> IDENT param_list LCURLY . ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (39) intermfluent_def -> IDENT param_list LCURLY . INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT param_list LCURLY . INTERMEDIATE COMMA type_spec RCURLY SEMI
    (41) derivedfluent_def -> IDENT param_list LCURLY . DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT param_list LCURLY . DERIVED_FLUENT COMMA type_spec RCURLY SEMI
    (43) observfluent_def -> IDENT param_list LCURLY . OBSERVATION COMMA type_spec RCURLY SEMI

    NON_FLUENT      shift and go to state 381
    STATE           shift and go to state 382
    ACTION          shift and go to state 383
    INTERMEDIATE    shift and go to state 384
    DERIVED_FLUENT  shift and go to state 385
    OBSERVATION     shift and go to state 386


state 342

    (144) param_list -> LPAREN param_list2 . RPAREN COLON
    (146) param_list2 -> param_list2 . COMMA type_spec

    RPAREN          shift and go to state 387
    COMMA           shift and go to state 388


state 343

    (145) param_list2 -> type_spec .

    RPAREN          reduce using rule 145 (param_list2 -> type_spec .)
    COMMA           reduce using rule 145 (param_list2 -> type_spec .)


state 344

    (147) type_spec -> IDENT .

    RPAREN          reduce using rule 147 (type_spec -> IDENT .)
    COMMA           reduce using rule 147 (type_spec -> IDENT .)
    RCURLY          reduce using rule 147 (type_spec -> IDENT .)


state 345

    (148) type_spec -> INT .

    RPAREN          reduce using rule 148 (type_spec -> INT .)
    COMMA           reduce using rule 148 (type_spec -> INT .)
    RCURLY          reduce using rule 148 (type_spec -> INT .)


state 346

    (149) type_spec -> REAL .

    RPAREN          reduce using rule 149 (type_spec -> REAL .)
    COMMA           reduce using rule 149 (type_spec -> REAL .)
    RCURLY          reduce using rule 149 (type_spec -> REAL .)


state 347

    (150) type_spec -> BOOL .

    RPAREN          reduce using rule 150 (type_spec -> BOOL .)
    COMMA           reduce using rule 150 (type_spec -> BOOL .)
    RCURLY          reduce using rule 150 (type_spec -> BOOL .)


state 348

    (49) cpf_def -> pvar_expr ASSIGN_EQUAL expr . SEMI
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            shift and go to state 389
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 349

    (87) pvar_expr -> IDENT LPAREN term_list RPAREN .

    SEMI            reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    COMP_EQUAL      reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    NEQ             reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    GREATER         reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    GREATEREQ       reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    LESS            reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    LESSEQ          reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    AND             reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    AMPERSAND       reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    OR              reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    IMPLY           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    EQUIV           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    PLUS            reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    MINUS           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    TIMES           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    DIV             reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    ASSIGN_EQUAL    reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    RPAREN          reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    RBRACK          reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    COMMA           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    ELSE            reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    RCURLY          reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)
    COLON           reduce using rule 87 (pvar_expr -> IDENT LPAREN term_list RPAREN .)


state 350

    (71) term_list -> term_list COMMA . term
    (74) term -> . VAR
    (75) term -> . ENUM_VAL
    (76) term -> . pvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT

    VAR             shift and go to state 303
    ENUM_VAL        shift and go to state 304
    IDENT           shift and go to state 199

    term                           shift and go to state 390
    pvar_expr                      shift and go to state 305

state 351

    (91) function_expr -> IDENT LBRACK expr_list RBRACK .

    SEMI            reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    COMP_EQUAL      reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    NEQ             reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    GREATER         reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    GREATEREQ       reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    LESS            reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    LESSEQ          reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    AND             reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    AMPERSAND       reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    OR              reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    IMPLY           reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    EQUIV           reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    PLUS            reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    MINUS           reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    TIMES           reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    DIV             reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    RPAREN          reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    RBRACK          reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    COMMA           reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    ELSE            reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)
    RCURLY          reduce using rule 91 (function_expr -> IDENT LBRACK expr_list RBRACK .)


state 352

    (132) expr_list -> expr_list COMMA . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 391
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 353

    (115) aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list . RCURLY expr
    (129) typed_var_list -> typed_var_list . COMMA typed_var

    RCURLY          shift and go to state 392
    COMMA           shift and go to state 393


state 354

    (130) typed_var_list -> typed_var .

    RCURLY          reduce using rule 130 (typed_var_list -> typed_var .)
    COMMA           reduce using rule 130 (typed_var_list -> typed_var .)


state 355

    (131) typed_var -> VAR . COLON IDENT

    COLON           shift and go to state 394


state 356

    (105) quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list . RCURLY expr
    (129) typed_var_list -> typed_var_list . COMMA typed_var

    RCURLY          shift and go to state 395
    COMMA           shift and go to state 393


state 357

    (106) quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list . RCURLY expr
    (129) typed_var_list -> typed_var_list . COMMA typed_var

    RCURLY          shift and go to state 396
    COMMA           shift and go to state 393


state 358

    (116) control_expr -> IF LPAREN expr RPAREN . THEN expr ELSE expr

    THEN            shift and go to state 397


state 359

    (117) control_expr -> SWITCH LPAREN term RPAREN . LCURLY case_list RCURLY

    LCURLY          shift and go to state 398


state 360

    (118) randomvar_expr -> BERNOULLI LPAREN expr RPAREN .

    SEMI            reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    NEQ             reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    GREATER         reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    LESS            reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    AND             reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    OR              reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    IMPLY           reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    EQUIV           reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    PLUS            reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    MINUS           reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    TIMES           reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    DIV             reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    RPAREN          reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    RBRACK          reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    COMMA           reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    ELSE            reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)
    RCURLY          reduce using rule 118 (randomvar_expr -> BERNOULLI LPAREN expr RPAREN .)


state 361

    (119) randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .

    SEMI            reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    NEQ             reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    GREATER         reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    LESS            reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    AND             reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    OR              reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    IMPLY           reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    EQUIV           reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    PLUS            reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    MINUS           reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    TIMES           reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    DIV             reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    RPAREN          reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    RBRACK          reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    COMMA           reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    ELSE            reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)
    RCURLY          reduce using rule 119 (randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN .)


state 362

    (120) randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .

    SEMI            reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    NEQ             reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    GREATER         reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    LESS            reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    AND             reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    OR              reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    IMPLY           reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    EQUIV           reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    PLUS            reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    MINUS           reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    TIMES           reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    DIV             reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    RPAREN          reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    RBRACK          reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    COMMA           reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    ELSE            reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)
    RCURLY          reduce using rule 120 (randomvar_expr -> KRON_DELTA LPAREN expr RPAREN .)


state 363

    (121) randomvar_expr -> UNIFORM LPAREN expr COMMA . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 399
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 364

    (122) randomvar_expr -> NORMAL LPAREN expr COMMA . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 400
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 365

    (123) randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .

    SEMI            reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    NEQ             reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    GREATER         reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    LESS            reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    AND             reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    OR              reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    IMPLY           reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    EQUIV           reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    PLUS            reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    TIMES           reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    DIV             reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    RPAREN          reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    RBRACK          reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    COMMA           reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    ELSE            reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)
    RCURLY          reduce using rule 123 (randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN .)


state 366

    (124) randomvar_expr -> DISCRETE LPAREN IDENT COMMA . lconst_case_list RPAREN
    (138) lconst_case_list -> . lconst COLON expr
    (139) lconst_case_list -> . lconst COLON OTHERWISE
    (140) lconst_case_list -> . lconst_case_list COMMA lconst COLON expr
    (141) lconst -> . IDENT
    (142) lconst -> . ENUM_VAL

    IDENT           shift and go to state 259
    ENUM_VAL        shift and go to state 262

    lconst_case_list               shift and go to state 401
    lconst                         shift and go to state 402

state 367

    (125) randomvar_expr -> DIRICHLET LPAREN IDENT COMMA . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 403
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 368

    (126) randomvar_expr -> POISSON LPAREN expr RPAREN .

    SEMI            reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    COMP_EQUAL      reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    NEQ             reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    GREATER         reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    GREATEREQ       reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    LESS            reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    LESSEQ          reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    AND             reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    AMPERSAND       reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    OR              reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    IMPLY           reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    EQUIV           reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    PLUS            reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    MINUS           reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    TIMES           reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    DIV             reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    RPAREN          reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    RBRACK          reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    COMMA           reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    ELSE            reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)
    RCURLY          reduce using rule 126 (randomvar_expr -> POISSON LPAREN expr RPAREN .)


state 369

    (127) randomvar_expr -> WEIBULL LPAREN expr COMMA . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 404
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 370

    (128) randomvar_expr -> GAMMA LPAREN expr COMMA . expr RPAREN
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 405
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 371

    (191) objects_def -> IDENT COLON LCURLY object_const_list RCURLY . SEMI

    SEMI            shift and go to state 406


state 372

    (192) object_const_list -> object_const_list COMMA . IDENT

    IDENT           shift and go to state 407


state 373

    (196) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI .

    RCURLY          reduce using rule 196 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI .)
    IDENT           reduce using rule 196 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI .)
    NOT             reduce using rule 196 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI .)


state 374

    (200) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL . range_const SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 408
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 375

    (202) lconst_list -> lconst_list COMMA lconst .

    RPAREN          reduce using rule 202 (lconst_list -> lconst_list COMMA lconst .)
    COMMA           reduce using rule 202 (lconst_list -> lconst_list COMMA lconst .)


state 376

    (198) pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN . SEMI

    SEMI            shift and go to state 409


state 377

    (22) type_def -> IDENT COLON OBJECT SEMI .

    RCURLY          reduce using rule 22 (type_def -> IDENT COLON OBJECT SEMI .)
    IDENT           reduce using rule 22 (type_def -> IDENT COLON OBJECT SEMI .)


state 378

    (23) type_def -> IDENT COLON LCURLY enum_list . RCURLY SEMI
    (24) enum_list -> enum_list . COMMA ENUM_VAL

    RCURLY          shift and go to state 410
    COMMA           shift and go to state 411


state 379

    (25) enum_list -> ENUM_VAL .

    RCURLY          reduce using rule 25 (enum_list -> ENUM_VAL .)
    COMMA           reduce using rule 25 (enum_list -> ENUM_VAL .)


state 380

    (26) enum_list -> empty .

    RCURLY          reduce using rule 26 (enum_list -> empty .)
    COMMA           reduce using rule 26 (enum_list -> empty .)


state 381

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT . COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 412


state 382

    (37) statefluent_def -> IDENT param_list LCURLY STATE . COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 413


state 383

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION . COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 414


state 384

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE . COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE . COMMA type_spec RCURLY SEMI

    COMMA           shift and go to state 415


state 385

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT . COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT . COMMA type_spec RCURLY SEMI

    COMMA           shift and go to state 416


state 386

    (43) observfluent_def -> IDENT param_list LCURLY OBSERVATION . COMMA type_spec RCURLY SEMI

    COMMA           shift and go to state 417


state 387

    (144) param_list -> LPAREN param_list2 RPAREN . COLON

    COLON           shift and go to state 418


state 388

    (146) param_list2 -> param_list2 COMMA . type_spec
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 419

state 389

    (49) cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI .

    RCURLY          reduce using rule 49 (cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI .)
    IDENT           reduce using rule 49 (cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI .)


state 390

    (71) term_list -> term_list COMMA term .

    RPAREN          reduce using rule 71 (term_list -> term_list COMMA term .)
    COMMA           reduce using rule 71 (term_list -> term_list COMMA term .)


state 391

    (132) expr_list -> expr_list COMMA expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RBRACK          reduce using rule 132 (expr_list -> expr_list COMMA expr .)
    COMMA           reduce using rule 132 (expr_list -> expr_list COMMA expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 392

    (115) aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 420
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 393

    (129) typed_var_list -> typed_var_list COMMA . typed_var
    (131) typed_var -> . VAR COLON IDENT

    VAR             shift and go to state 355

    typed_var                      shift and go to state 421

state 394

    (131) typed_var -> VAR COLON . IDENT

    IDENT           shift and go to state 422


state 395

    (105) quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 423
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 396

    (106) quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 424
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 397

    (116) control_expr -> IF LPAREN expr RPAREN THEN . expr ELSE expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 425
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 398

    (117) control_expr -> SWITCH LPAREN term RPAREN LCURLY . case_list RCURLY
    (134) case_list -> . case_list COMMA case_def
    (135) case_list -> . case_def
    (136) case_def -> . CASE term COLON expr
    (137) case_def -> . DEFAULT COLON expr

    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429

    case_list                      shift and go to state 426
    case_def                       shift and go to state 427

state 399

    (121) randomvar_expr -> UNIFORM LPAREN expr COMMA expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 430
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 400

    (122) randomvar_expr -> NORMAL LPAREN expr COMMA expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 431
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 401

    (124) randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list . RPAREN
    (140) lconst_case_list -> lconst_case_list . COMMA lconst COLON expr

    RPAREN          shift and go to state 433
    COMMA           shift and go to state 432


state 402

    (138) lconst_case_list -> lconst . COLON expr
    (139) lconst_case_list -> lconst . COLON OTHERWISE

    COLON           shift and go to state 434


state 403

    (125) randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 435
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 404

    (127) randomvar_expr -> WEIBULL LPAREN expr COMMA expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 436
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 405

    (128) randomvar_expr -> GAMMA LPAREN expr COMMA expr . RPAREN
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          shift and go to state 437
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 406

    (191) objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI .

    RCURLY          reduce using rule 191 (objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI .)
    IDENT           reduce using rule 191 (objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI .)


state 407

    (192) object_const_list -> object_const_list COMMA IDENT .

    RCURLY          reduce using rule 192 (object_const_list -> object_const_list COMMA IDENT .)
    COMMA           reduce using rule 192 (object_const_list -> object_const_list COMMA IDENT .)


state 408

    (200) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const . SEMI

    SEMI            shift and go to state 438


state 409

    (198) pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI .

    RCURLY          reduce using rule 198 (pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI .)
    IDENT           reduce using rule 198 (pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI .)
    NOT             reduce using rule 198 (pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI .)


state 410

    (23) type_def -> IDENT COLON LCURLY enum_list RCURLY . SEMI

    SEMI            shift and go to state 439


state 411

    (24) enum_list -> enum_list COMMA . ENUM_VAL

    ENUM_VAL        shift and go to state 440


state 412

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA . type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 441

state 413

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA . type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 442

state 414

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA . type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 443

state 415

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA . type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA . type_spec RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 444

state 416

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA . type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA . type_spec RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 445

state 417

    (43) observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA . type_spec RCURLY SEMI
    (147) type_spec -> . IDENT
    (148) type_spec -> . INT
    (149) type_spec -> . REAL
    (150) type_spec -> . BOOL

    IDENT           shift and go to state 344
    INT             shift and go to state 345
    REAL            shift and go to state 346
    BOOL            shift and go to state 347

    type_spec                      shift and go to state 446

state 418

    (144) param_list -> LPAREN param_list2 RPAREN COLON .

    LCURLY          reduce using rule 144 (param_list -> LPAREN param_list2 RPAREN COLON .)


state 419

    (146) param_list2 -> param_list2 COMMA type_spec .

    RPAREN          reduce using rule 146 (param_list2 -> param_list2 COMMA type_spec .)
    COMMA           reduce using rule 146 (param_list2 -> param_list2 COMMA type_spec .)


state 420

    (115) aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RPAREN          reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RBRACK          reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMMA           reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    ELSE            reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RCURLY          reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! NEQ             [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATER         [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATEREQ       [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESS            [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESSEQ          [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AND             [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AMPERSAND       [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! OR              [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! IMPLY           [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! EQUIV           [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! PLUS            [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! MINUS           [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! TIMES           [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! DIV             [ reduce using rule 115 (aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]


state 421

    (129) typed_var_list -> typed_var_list COMMA typed_var .

    RCURLY          reduce using rule 129 (typed_var_list -> typed_var_list COMMA typed_var .)
    COMMA           reduce using rule 129 (typed_var_list -> typed_var_list COMMA typed_var .)


state 422

    (131) typed_var -> VAR COLON IDENT .

    RCURLY          reduce using rule 131 (typed_var -> VAR COLON IDENT .)
    COMMA           reduce using rule 131 (typed_var -> VAR COLON IDENT .)


state 423

    (105) quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RPAREN          reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RBRACK          reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMMA           reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    ELSE            reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RCURLY          reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! NEQ             [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATER         [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATEREQ       [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESS            [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESSEQ          [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AND             [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AMPERSAND       [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! OR              [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! IMPLY           [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! EQUIV           [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! PLUS            [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! MINUS           [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! TIMES           [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! DIV             [ reduce using rule 105 (quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]


state 424

    (106) quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RPAREN          reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RBRACK          reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMMA           reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    ELSE            reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    RCURLY          reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! NEQ             [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATER         [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! GREATEREQ       [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESS            [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! LESSEQ          [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AND             [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! AMPERSAND       [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! OR              [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! IMPLY           [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! EQUIV           [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! PLUS            [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! MINUS           [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! TIMES           [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]
  ! DIV             [ reduce using rule 106 (quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr .) ]


state 425

    (116) control_expr -> IF LPAREN expr RPAREN THEN expr . ELSE expr
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    ELSE            shift and go to state 447
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 426

    (117) control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list . RCURLY
    (134) case_list -> case_list . COMMA case_def

    RCURLY          shift and go to state 448
    COMMA           shift and go to state 449


state 427

    (135) case_list -> case_def .

    RCURLY          reduce using rule 135 (case_list -> case_def .)
    COMMA           reduce using rule 135 (case_list -> case_def .)


state 428

    (136) case_def -> CASE . term COLON expr
    (74) term -> . VAR
    (75) term -> . ENUM_VAL
    (76) term -> . pvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT

    VAR             shift and go to state 303
    ENUM_VAL        shift and go to state 304
    IDENT           shift and go to state 199

    term                           shift and go to state 450
    pvar_expr                      shift and go to state 305

state 429

    (137) case_def -> DEFAULT . COLON expr

    COLON           shift and go to state 451


state 430

    (121) randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .

    SEMI            reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    COMP_EQUAL      reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    NEQ             reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    GREATER         reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    GREATEREQ       reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    LESS            reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    LESSEQ          reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    AND             reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    AMPERSAND       reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    OR              reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    IMPLY           reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    EQUIV           reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    DIV             reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    RBRACK          reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)
    RCURLY          reduce using rule 121 (randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN .)


state 431

    (122) randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .

    SEMI            reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    COMP_EQUAL      reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    NEQ             reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    GREATER         reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    GREATEREQ       reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    LESS            reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    LESSEQ          reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    AND             reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    AMPERSAND       reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    OR              reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    IMPLY           reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    EQUIV           reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    DIV             reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    RBRACK          reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)
    RCURLY          reduce using rule 122 (randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN .)


state 432

    (140) lconst_case_list -> lconst_case_list COMMA . lconst COLON expr
    (141) lconst -> . IDENT
    (142) lconst -> . ENUM_VAL

    IDENT           shift and go to state 259
    ENUM_VAL        shift and go to state 262

    lconst                         shift and go to state 452

state 433

    (124) randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .

    SEMI            reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    COMP_EQUAL      reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    NEQ             reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    GREATER         reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    GREATEREQ       reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    LESS            reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    LESSEQ          reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    AND             reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    AMPERSAND       reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    OR              reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    IMPLY           reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    EQUIV           reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    PLUS            reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    MINUS           reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    TIMES           reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    DIV             reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    RPAREN          reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    RBRACK          reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    COMMA           reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    ELSE            reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)
    RCURLY          reduce using rule 124 (randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN .)


state 434

    (138) lconst_case_list -> lconst COLON . expr
    (139) lconst_case_list -> lconst COLON . OTHERWISE
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    OTHERWISE       shift and go to state 454
    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 453
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 435

    (125) randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .

    SEMI            reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    COMP_EQUAL      reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    NEQ             reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    GREATER         reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    GREATEREQ       reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    LESS            reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    LESSEQ          reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    AND             reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    AMPERSAND       reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    OR              reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    IMPLY           reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    EQUIV           reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    PLUS            reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    MINUS           reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    TIMES           reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    DIV             reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    RPAREN          reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    RBRACK          reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    COMMA           reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    ELSE            reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)
    RCURLY          reduce using rule 125 (randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN .)


state 436

    (127) randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .

    SEMI            reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    COMP_EQUAL      reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    NEQ             reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    GREATER         reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    GREATEREQ       reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    LESS            reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    LESSEQ          reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    AND             reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    AMPERSAND       reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    OR              reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    IMPLY           reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    EQUIV           reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    DIV             reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    RBRACK          reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)
    RCURLY          reduce using rule 127 (randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN .)


state 437

    (128) randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .

    SEMI            reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    COMP_EQUAL      reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    NEQ             reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    GREATER         reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    GREATEREQ       reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    LESS            reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    LESSEQ          reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    AND             reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    AMPERSAND       reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    OR              reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    IMPLY           reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    EQUIV           reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    PLUS            reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    MINUS           reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    TIMES           reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    DIV             reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    RPAREN          reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    RBRACK          reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    COMMA           reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    ELSE            reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)
    RCURLY          reduce using rule 128 (randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN .)


state 438

    (200) pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI .

    RCURLY          reduce using rule 200 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI .)
    IDENT           reduce using rule 200 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI .)
    NOT             reduce using rule 200 (pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI .)


state 439

    (23) type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI .

    RCURLY          reduce using rule 23 (type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI .)
    IDENT           reduce using rule 23 (type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI .)


state 440

    (24) enum_list -> enum_list COMMA ENUM_VAL .

    RCURLY          reduce using rule 24 (enum_list -> enum_list COMMA ENUM_VAL .)
    COMMA           reduce using rule 24 (enum_list -> enum_list COMMA ENUM_VAL .)


state 441

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec . COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 455


state 442

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec . COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 456


state 443

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec . COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    COMMA           shift and go to state 457


state 444

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec . COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (40) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec . RCURLY SEMI

    COMMA           shift and go to state 458
    RCURLY          shift and go to state 459


state 445

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec . COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI
    (42) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec . RCURLY SEMI

    COMMA           shift and go to state 460
    RCURLY          shift and go to state 461


state 446

    (43) observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec . RCURLY SEMI

    RCURLY          shift and go to state 462


state 447

    (116) control_expr -> IF LPAREN expr RPAREN THEN expr ELSE . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 463
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 448

    (117) control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .

    SEMI            reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    COMP_EQUAL      reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    NEQ             reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    GREATER         reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    GREATEREQ       reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    LESS            reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    LESSEQ          reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    AND             reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    AMPERSAND       reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    OR              reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    IMPLY           reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    EQUIV           reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    PLUS            reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    MINUS           reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    TIMES           reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    DIV             reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    RPAREN          reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    RBRACK          reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    COMMA           reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    ELSE            reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)
    RCURLY          reduce using rule 117 (control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY .)


state 449

    (134) case_list -> case_list COMMA . case_def
    (136) case_def -> . CASE term COLON expr
    (137) case_def -> . DEFAULT COLON expr

    CASE            shift and go to state 428
    DEFAULT         shift and go to state 429

    case_def                       shift and go to state 464

state 450

    (136) case_def -> CASE term . COLON expr

    COLON           shift and go to state 465


state 451

    (137) case_def -> DEFAULT COLON . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 466
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 452

    (140) lconst_case_list -> lconst_case_list COMMA lconst . COLON expr

    COLON           shift and go to state 467


state 453

    (138) lconst_case_list -> lconst COLON expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          reduce using rule 138 (lconst_case_list -> lconst COLON expr .)
    COMMA           reduce using rule 138 (lconst_case_list -> lconst COLON expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 454

    (139) lconst_case_list -> lconst COLON OTHERWISE .

    RPAREN          reduce using rule 139 (lconst_case_list -> lconst COLON OTHERWISE .)
    COMMA           reduce using rule 139 (lconst_case_list -> lconst COLON OTHERWISE .)


state 455

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA . DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    DEFAULT         shift and go to state 468


state 456

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA . DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    DEFAULT         shift and go to state 469


state 457

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA . DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI

    DEFAULT         shift and go to state 470


state 458

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA . LEVEL ASSIGN_EQUAL range_const RCURLY SEMI

    LEVEL           shift and go to state 471


state 459

    (40) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY . SEMI

    SEMI            shift and go to state 472


state 460

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA . LEVEL ASSIGN_EQUAL range_const RCURLY SEMI

    LEVEL           shift and go to state 473


state 461

    (42) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY . SEMI

    SEMI            shift and go to state 474


state 462

    (43) observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY . SEMI

    SEMI            shift and go to state 475


state 463

    (116) control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    SEMI            reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    RPAREN          reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    RBRACK          reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    COMMA           reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    ELSE            reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    RCURLY          reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215

  ! COMP_EQUAL      [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! NEQ             [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! GREATER         [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! GREATEREQ       [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! LESS            [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! LESSEQ          [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! AND             [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! AMPERSAND       [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! OR              [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! IMPLY           [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! EQUIV           [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! PLUS            [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! MINUS           [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! TIMES           [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]
  ! DIV             [ reduce using rule 116 (control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr .) ]


state 464

    (134) case_list -> case_list COMMA case_def .

    RCURLY          reduce using rule 134 (case_list -> case_list COMMA case_def .)
    COMMA           reduce using rule 134 (case_list -> case_list COMMA case_def .)


state 465

    (136) case_def -> CASE term COLON . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 476
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 466

    (137) case_def -> DEFAULT COLON expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RCURLY          reduce using rule 137 (case_def -> DEFAULT COLON expr .)
    COMMA           reduce using rule 137 (case_def -> DEFAULT COLON expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 467

    (140) lconst_case_list -> lconst_case_list COMMA lconst COLON . expr
    (77) expr -> . pvar_expr
    (78) expr -> . group_expr
    (79) expr -> . function_expr
    (80) expr -> . relational_expr
    (81) expr -> . boolean_expr
    (82) expr -> . quantifier_expr
    (83) expr -> . numerical_expr
    (84) expr -> . aggregation_expr
    (85) expr -> . control_expr
    (86) expr -> . randomvar_expr
    (87) pvar_expr -> . IDENT LPAREN term_list RPAREN
    (88) pvar_expr -> . IDENT
    (89) group_expr -> . LBRACK expr RBRACK
    (90) group_expr -> . LPAREN expr RPAREN
    (91) function_expr -> . IDENT LBRACK expr_list RBRACK
    (92) relational_expr -> . expr COMP_EQUAL expr
    (93) relational_expr -> . expr NEQ expr
    (94) relational_expr -> . expr GREATER expr
    (95) relational_expr -> . expr GREATEREQ expr
    (96) relational_expr -> . expr LESS expr
    (97) relational_expr -> . expr LESSEQ expr
    (98) boolean_expr -> . expr AND expr
    (99) boolean_expr -> . expr AMPERSAND expr
    (100) boolean_expr -> . expr OR expr
    (101) boolean_expr -> . expr IMPLY expr
    (102) boolean_expr -> . expr EQUIV expr
    (103) boolean_expr -> . NOT expr
    (104) boolean_expr -> . bool_type
    (105) quantifier_expr -> . FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr
    (106) quantifier_expr -> . EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr
    (107) numerical_expr -> . expr PLUS expr
    (108) numerical_expr -> . expr MINUS expr
    (109) numerical_expr -> . expr TIMES expr
    (110) numerical_expr -> . expr DIV expr
    (111) numerical_expr -> . MINUS expr
    (112) numerical_expr -> . PLUS expr
    (113) numerical_expr -> . INTEGER
    (114) numerical_expr -> . DOUBLE
    (115) aggregation_expr -> . IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr
    (116) control_expr -> . IF LPAREN expr RPAREN THEN expr ELSE expr
    (117) control_expr -> . SWITCH LPAREN term RPAREN LCURLY case_list RCURLY
    (118) randomvar_expr -> . BERNOULLI LPAREN expr RPAREN
    (119) randomvar_expr -> . DIRAC_DELTA LPAREN expr RPAREN
    (120) randomvar_expr -> . KRON_DELTA LPAREN expr RPAREN
    (121) randomvar_expr -> . UNIFORM LPAREN expr COMMA expr RPAREN
    (122) randomvar_expr -> . NORMAL LPAREN expr COMMA expr RPAREN
    (123) randomvar_expr -> . EXPONENTIAL LPAREN expr RPAREN
    (124) randomvar_expr -> . DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN
    (125) randomvar_expr -> . DIRICHLET LPAREN IDENT COMMA expr RPAREN
    (126) randomvar_expr -> . POISSON LPAREN expr RPAREN
    (127) randomvar_expr -> . WEIBULL LPAREN expr COMMA expr RPAREN
    (128) randomvar_expr -> . GAMMA LPAREN expr COMMA expr RPAREN
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE

    IDENT           shift and go to state 123
    LBRACK          shift and go to state 125
    LPAREN          shift and go to state 124
    NOT             shift and go to state 126
    FORALL          shift and go to state 128
    EXISTS          shift and go to state 129
    MINUS           shift and go to state 131
    PLUS            shift and go to state 130
    INTEGER         shift and go to state 132
    DOUBLE          shift and go to state 133
    IF              shift and go to state 134
    SWITCH          shift and go to state 135
    BERNOULLI       shift and go to state 136
    DIRAC_DELTA     shift and go to state 137
    KRON_DELTA      shift and go to state 138
    UNIFORM         shift and go to state 139
    NORMAL          shift and go to state 140
    EXPONENTIAL     shift and go to state 141
    DISCRETE        shift and go to state 142
    DIRICHLET       shift and go to state 143
    POISSON         shift and go to state 144
    WEIBULL         shift and go to state 145
    GAMMA           shift and go to state 146
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148

    expr                           shift and go to state 477
    pvar_expr                      shift and go to state 113
    group_expr                     shift and go to state 114
    function_expr                  shift and go to state 115
    relational_expr                shift and go to state 116
    boolean_expr                   shift and go to state 117
    quantifier_expr                shift and go to state 118
    numerical_expr                 shift and go to state 119
    aggregation_expr               shift and go to state 120
    control_expr                   shift and go to state 121
    randomvar_expr                 shift and go to state 122
    bool_type                      shift and go to state 127

state 468

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT . ASSIGN_EQUAL range_const RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 478


state 469

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT . ASSIGN_EQUAL range_const RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 479


state 470

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT . ASSIGN_EQUAL range_const RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 480


state 471

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL . ASSIGN_EQUAL range_const RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 481


state 472

    (40) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI .

    RCURLY          reduce using rule 40 (intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI .)
    IDENT           reduce using rule 40 (intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI .)


state 473

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL . ASSIGN_EQUAL range_const RCURLY SEMI

    ASSIGN_EQUAL    shift and go to state 482


state 474

    (42) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI .

    RCURLY          reduce using rule 42 (derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI .)
    IDENT           reduce using rule 42 (derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI .)


state 475

    (43) observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI .

    RCURLY          reduce using rule 43 (observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI .)
    IDENT           reduce using rule 43 (observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI .)


state 476

    (136) case_def -> CASE term COLON expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RCURLY          reduce using rule 136 (case_def -> CASE term COLON expr .)
    COMMA           reduce using rule 136 (case_def -> CASE term COLON expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 477

    (140) lconst_case_list -> lconst_case_list COMMA lconst COLON expr .
    (92) relational_expr -> expr . COMP_EQUAL expr
    (93) relational_expr -> expr . NEQ expr
    (94) relational_expr -> expr . GREATER expr
    (95) relational_expr -> expr . GREATEREQ expr
    (96) relational_expr -> expr . LESS expr
    (97) relational_expr -> expr . LESSEQ expr
    (98) boolean_expr -> expr . AND expr
    (99) boolean_expr -> expr . AMPERSAND expr
    (100) boolean_expr -> expr . OR expr
    (101) boolean_expr -> expr . IMPLY expr
    (102) boolean_expr -> expr . EQUIV expr
    (107) numerical_expr -> expr . PLUS expr
    (108) numerical_expr -> expr . MINUS expr
    (109) numerical_expr -> expr . TIMES expr
    (110) numerical_expr -> expr . DIV expr

    RPAREN          reduce using rule 140 (lconst_case_list -> lconst_case_list COMMA lconst COLON expr .)
    COMMA           reduce using rule 140 (lconst_case_list -> lconst_case_list COMMA lconst COLON expr .)
    COMP_EQUAL      shift and go to state 201
    NEQ             shift and go to state 202
    GREATER         shift and go to state 203
    GREATEREQ       shift and go to state 204
    LESS            shift and go to state 205
    LESSEQ          shift and go to state 206
    AND             shift and go to state 207
    AMPERSAND       shift and go to state 208
    OR              shift and go to state 209
    IMPLY           shift and go to state 210
    EQUIV           shift and go to state 211
    PLUS            shift and go to state 212
    MINUS           shift and go to state 213
    TIMES           shift and go to state 214
    DIV             shift and go to state 215


state 478

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL . range_const RCURLY SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 483
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 479

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL . range_const RCURLY SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 484
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 480

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL . range_const RCURLY SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 485
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 481

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL . range_const RCURLY SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 486
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 482

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL . range_const RCURLY SEMI
    (151) range_const -> . bool_type
    (152) range_const -> . double_type
    (153) range_const -> . int_type
    (154) range_const -> . IDENT
    (155) bool_type -> . TRUE
    (156) bool_type -> . FALSE
    (157) double_type -> . DOUBLE
    (158) double_type -> . MINUS DOUBLE
    (159) double_type -> . POS_INF
    (160) double_type -> . NEG_INF
    (161) int_type -> . INTEGER
    (162) int_type -> . MINUS INTEGER

    IDENT           shift and go to state 263
    TRUE            shift and go to state 147
    FALSE           shift and go to state 148
    DOUBLE          shift and go to state 268
    MINUS           shift and go to state 269
    POS_INF         shift and go to state 270
    NEG_INF         shift and go to state 271
    INTEGER         shift and go to state 272

    range_const                    shift and go to state 487
    bool_type                      shift and go to state 265
    double_type                    shift and go to state 266
    int_type                       shift and go to state 267

state 483

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const . RCURLY SEMI

    RCURLY          shift and go to state 488


state 484

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const . RCURLY SEMI

    RCURLY          shift and go to state 489


state 485

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const . RCURLY SEMI

    RCURLY          shift and go to state 490


state 486

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const . RCURLY SEMI

    RCURLY          shift and go to state 491


state 487

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const . RCURLY SEMI

    RCURLY          shift and go to state 492


state 488

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY . SEMI

    SEMI            shift and go to state 493


state 489

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY . SEMI

    SEMI            shift and go to state 494


state 490

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY . SEMI

    SEMI            shift and go to state 495


state 491

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY . SEMI

    SEMI            shift and go to state 496


state 492

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY . SEMI

    SEMI            shift and go to state 497


state 493

    (36) nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .

    RCURLY          reduce using rule 36 (nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)
    IDENT           reduce using rule 36 (nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)


state 494

    (37) statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .

    RCURLY          reduce using rule 37 (statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)
    IDENT           reduce using rule 37 (statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)


state 495

    (38) actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .

    RCURLY          reduce using rule 38 (actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)
    IDENT           reduce using rule 38 (actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI .)


state 496

    (39) intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .

    RCURLY          reduce using rule 39 (intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .)
    IDENT           reduce using rule 39 (intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .)


state 497

    (41) derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .

    RCURLY          reduce using rule 41 (derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .)
    IDENT           reduce using rule 41 (derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENT in state 72 resolved as shift
