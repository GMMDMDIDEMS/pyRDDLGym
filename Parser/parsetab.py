
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftASSIGN_EQUALleftEXISTSleftFORALLleftAGG_OPERleftEQUIVleftIMPLYleftORleftANDAMPERSANDleftNOTleftCOMP_EQUALNEQLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVrightUMINUSACTION ACTION_PRECONDITIONS AMPERSAND AND ASSIGN_EQUAL BERNOULLI BOOL CASE CDFS COLON COMMA COMP_EQUAL CPFS DEFAULT DERIVED_FLUENT DIRAC_DELTA DIRICHLET DISCOUNT DISCRETE DIV DOLLAR_SIGN DOMAIN DOT DOUBLE ELSE ENUM_VAL EQUIV EXISTS EXPONENTIAL FALSE FORALL GAMMA GREATER GREATEREQ HORIZON IDENT IF IMPLY INIT_STATE INSTANCE INT INTEGER INTERMEDIATE KRON_DELTA LBRACK LCURLY LESS LESSEQ LEVEL LPAREN MAX_NONDEF_ACTIONS MINUS MULTINOMIAL NEG_INF NEQ NON_FLUENT NON_FLUENTS NORMAL NOT OBJECT OBJECTS OBSERVATION OR OTHERWISE PLUS POISSON POS_INF PVARIABLES QUESTION RBRACK RCURLY REAL REQUIREMENTS REWARD RPAREN SEMI STATE STATE_ACTION_CONSTRAINTS STATE_INVARIANTS SWITCH TERMINAL TERMINATE_WHEN THEN TIMES TRUE TYPES UNDERSCORE UNIFORM VAR WEIBULLrddl : rddl_blockrddl_block : rddl_block domain_block\n                      | rddl_block instance_block\n                      | rddl_block nonfluent_block\n                      | emptydomain_block : DOMAIN IDENT LCURLY req_section domain_list RCURLYreq_section : REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI\n                       | REQUIREMENTS LCURLY string_list RCURLY SEMI\n                       | emptydomain_list : domain_list type_section\n                       | domain_list pvar_section\n                       | domain_list cpf_section\n                       | domain_list reward_section\n                       | domain_list action_precond_section\n                       | domain_list state_action_constraint_section\n                       | domain_list state_invariant_section\n                       | emptytype_section : TYPES LCURLY type_list RCURLY SEMItype_list : type_list type_def\n                     | emptytype_def : IDENT COLON OBJECT SEMI\n                    | IDENT COLON LCURLY enum_list RCURLY SEMIenum_list : enum_list COMMA ENUM_VAL\n                     | ENUM_VAL\n                     | emptypvar_section : PVARIABLES LCURLY pvar_list RCURLY SEMIpvar_list : pvar_list pvar_def\n                     | emptypvar_def : nonfluent_def\n                    | statefluent_def\n                    | actionfluent_def\n                    | intermfluent_def\n                    | derivedfluent_def\n                    | observfluent_defnonfluent_def : IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIstatefluent_def : IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIactionfluent_def : IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIintermfluent_def : IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMIderivedfluent_def : IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                             | IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMIobservfluent_def : IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMIcpf_section : cpf_header LCURLY cpf_list RCURLY SEMIcpf_header : CPFS\n                      | CDFScpf_list : cpf_list cpf_def\n                    | emptycpf_def : pvar_expr ASSIGN_EQUAL expr SEMIreward_section : REWARD ASSIGN_EQUAL expr SEMIaction_precond_section : ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI\n                                  | ACTION_PRECONDITIONS LCURLY RCURLY SEMIaction_precond_list : action_precond_list action_precond_def\n                               | action_precond_defaction_precond_def : expr SEMIstate_action_constraint_section : STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI\n                                           | STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMIstate_cons_list : state_cons_list state_cons_def\n                           | state_cons_defstate_cons_def : expr SEMIstate_invariant_section : STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI\n                                   | STATE_INVARIANTS LCURLY RCURLY SEMIstate_invariant_list : state_invariant_list state_invariant_def\n                                | state_invariant_defstate_invariant_def : expr SEMIterm_list : term_list COMMA term\n                     | term\n                     | emptyterm : VAR\n                | ENUM_VAL\n                | pvar_exprexpr : pvar_expr\n                | group_expr\n                | function_expr\n                | relational_expr\n                | boolean_expr\n                | quantifier_expr\n                | numerical_expr\n                | aggregation_expr\n                | control_expr\n                | randomvar_exprpvar_expr : IDENT LPAREN term_list RPAREN\n                     | IDENTgroup_expr : LBRACK expr RBRACK\n                      | LPAREN expr RPARENfunction_expr : IDENT LBRACK expr_list RBRACKrelational_expr : expr COMP_EQUAL expr\n                           | expr NEQ expr\n                           | expr GREATER expr\n                           | expr GREATEREQ expr\n                           | expr LESS expr\n                           | expr LESSEQ exprboolean_expr : expr AND expr\n                        | expr AMPERSAND expr\n                        | expr OR expr\n                        | expr IMPLY expr\n                        | expr EQUIV expr\n                        | NOT expr %prec UMINUS\n                        | bool_typequantifier_expr : FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr %prec FORALL\n                           | EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr %prec EXISTSnumerical_expr : expr PLUS expr\n                          | expr MINUS expr\n                          | expr TIMES expr\n                          | expr DIV expr\n                          | MINUS expr %prec UMINUS\n                          | PLUS expr %prec UMINUS\n                          | INTEGER\n                          | DOUBLEaggregation_expr : IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr %prec AGG_OPERcontrol_expr : IF LPAREN expr RPAREN THEN expr ELSE expr %prec IF\n                        | SWITCH LPAREN term RPAREN LCURLY case_list RCURLYrandomvar_expr : BERNOULLI LPAREN expr RPAREN\n                          | DIRAC_DELTA LPAREN expr RPAREN\n                          | KRON_DELTA LPAREN expr RPAREN\n                          | UNIFORM LPAREN expr COMMA expr RPAREN\n                          | NORMAL LPAREN expr COMMA expr RPAREN\n                          | EXPONENTIAL LPAREN expr RPAREN\n                          | DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN\n                          | DIRICHLET LPAREN IDENT COMMA expr RPAREN\n                          | POISSON LPAREN expr RPAREN\n                          | WEIBULL LPAREN expr COMMA expr RPAREN\n                          | GAMMA   LPAREN expr COMMA expr RPARENtyped_var_list : typed_var_list COMMA typed_var\n                          | typed_vartyped_var : VAR COLON IDENTexpr_list : expr_list COMMA expr\n                     | exprcase_list : case_list COMMA case_def\n                     | case_defcase_def : CASE term COLON expr\n                    | DEFAULT COLON exprlconst_case_list : lconst COLON expr\n                            | lconst COLON OTHERWISE\n                            | lconst_case_list COMMA lconst COLON exprlconst : IDENT\n                  | ENUM_VALparam_list : COLON\n                      | LPAREN param_list2 RPAREN COLONparam_list2 : type_spec\n                       | param_list2 COMMA type_spectype_spec : IDENT\n                     | INT\n                     | REAL\n                     | BOOLrange_const : bool_type\n                       | double_type\n                       | int_type\n                       | IDENTbool_type : TRUE\n                     | FALSEdouble_type : DOUBLE\n                       | MINUS DOUBLE\n                       | POS_INF\n                       | NEG_INFint_type : INTEGER\n                    | MINUS INTEGERpos_int_type_or_pos_inf : INTEGER\n                                   | POS_INFinstance_block : INSTANCE IDENT LCURLY instance_list RCURLYinstance_list : instance_list domain_section\n                         | instance_list nonfluents_section\n                         | instance_list objects_section\n                         | instance_list init_state_section\n                         | instance_list max_nondef_actions_section\n                         | instance_list horizon_spec_section\n                         | instance_list discount_section\n                         | emptydomain_section : DOMAIN ASSIGN_EQUAL IDENT SEMInonfluents_section : NON_FLUENTS ASSIGN_EQUAL IDENT SEMIobjects_section : OBJECTS LCURLY objects_list RCURLY SEMIinit_state_section : INIT_STATE LCURLY pvar_inst_list RCURLY SEMImax_nondef_actions_section : MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMIhorizon_spec_section : HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI\n                                | HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPARENdiscount_section : DISCOUNT ASSIGN_EQUAL DOUBLE SEMInonfluent_block : NON_FLUENTS IDENT LCURLY nonfluent_list RCURLYnonfluent_list : nonfluent_list domain_section\n                          | nonfluent_list objects_section\n                          | nonfluent_list init_non_fluent_section\n                          | emptyinit_non_fluent_section : NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMIobjects_list : objects_list objects_def\n                        | objects_def\n                        | emptyobjects_def : IDENT COLON LCURLY object_const_list RCURLY SEMIobject_const_list : object_const_list COMMA IDENT\n                             | IDENTpvar_inst_list : pvar_inst_list pvar_inst_def\n                          | pvar_inst_defpvar_inst_def : IDENT LPAREN lconst_list RPAREN SEMI\n                         | IDENT SEMI\n                         | NOT IDENT LPAREN lconst_list RPAREN SEMI\n                         | NOT IDENT SEMI\n                         | IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI\n                         | IDENT ASSIGN_EQUAL range_const SEMIlconst_list : lconst_list COMMA lconst\n                       | lconststring_list : string_list COMMA IDENT\n                       | IDENT\n                       | emptyempty :'
    
_lr_action_items = {'DOMAIN':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,161,162,172,173,175,245,247,265,326,],[-201,7,-5,-2,-3,-4,-201,-201,35,-167,35,-180,-159,-160,-161,-162,-163,-164,-165,-166,-176,-177,-178,-179,-6,-168,-169,-172,-173,-175,-170,-171,-181,-174,]),'INSTANCE':([0,2,3,4,5,6,27,43,47,],[-201,8,-5,-2,-3,-4,-159,-176,-6,]),'NON_FLUENTS':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,161,162,172,173,175,245,247,265,326,],[-201,9,-5,-2,-3,-4,-201,-201,36,-167,42,-180,-159,-160,-161,-162,-163,-164,-165,-166,-176,-177,-178,-179,-6,-168,-169,-172,-173,-175,-170,-171,-181,-174,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rddl':([0,],[1,]),'rddl_block':([0,],[2,]),'empty':([0,13,14,15,16,26,64,70,76,77,78,209,328,],[3,18,20,22,24,67,67,90,104,106,108,291,368,]),'domain_block':([2,],[4,]),'instance_block':([2,],[5,]),'nonfluent_block':([2,],[6,]),'req_section':([13,],[16,]),'instance_list':([14,],[19,]),'nonfluent_list':([15,],[21,]),'domain_list':([16,],[23,]),'domain_section':([19,21,],[28,44,]),'nonfluents_section':([19,],[29,]),'objects_section':([19,21,],[30,45,]),'init_state_section':([19,],[31,]),'max_nondef_actions_section':([19,],[32,]),'horizon_spec_section':([19,],[33,]),'discount_section':([19,],[34,]),'init_non_fluent_section':([21,],[46,]),'type_section':([23,],[48,]),'pvar_section':([23,],[49,]),'cpf_section':([23,],[50,]),'reward_section':([23,],[51,]),'action_precond_section':([23,],[52,]),'state_action_constraint_section':([23,],[53,]),'state_invariant_section':([23,],[54,]),'cpf_header':([23,],[57,]),'string_list':([26,64,],[65,83,]),'objects_list':([70,],[88,]),'objects_def':([70,88,],[89,164,]),'pvar_inst_list':([71,75,],[92,102,]),'pvar_inst_def':([71,75,92,102,],[93,93,167,167,]),'pos_int_type_or_pos_inf':([72,73,],[96,99,]),'type_list':([76,],[103,]),'pvar_list':([77,],[105,]),'cpf_list':([78,],[107,]),'expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[109,149,153,157,212,213,214,217,218,149,153,157,264,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,296,302,304,305,306,307,308,309,312,313,314,336,379,387,388,391,392,393,408,411,412,413,441,451,454,464,465,]),'pvar_expr':([79,80,81,82,107,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,219,220,221,222,223,224,225,226,229,230,231,273,338,340,351,352,355,357,358,380,383,384,385,416,422,435,439,453,455,],[110,110,110,110,191,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,294,110,110,294,110,110,110,110,110,110,110,110,110,110,294,110,110,110,110,110,110,110,110,110,110,294,110,110,110,110,110,]),'group_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'function_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'relational_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'boolean_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'quantifier_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'numerical_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'aggregation_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'control_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'randomvar_expr':([79,80,81,82,121,122,123,127,128,146,150,154,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,380,383,384,385,422,435,439,453,455,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'bool_type':([79,80,81,82,121,122,123,127,128,146,150,154,170,174,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,219,221,222,223,224,225,226,229,230,231,273,340,351,352,355,357,358,362,380,383,384,385,422,435,439,453,455,466,467,468,469,470,],[124,124,124,124,124,124,124,124,124,124,124,124,254,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,254,124,124,124,124,124,124,124,124,124,254,254,254,254,254,]),'action_precond_list':([80,],[146,]),'action_precond_def':([80,146,],[148,233,]),'state_cons_list':([81,],[150,]),'state_cons_def':([81,150,],[152,237,]),'state_invariant_list':([82,],[154,]),'state_invariant_def':([82,154,],[156,241,]),'type_def':([103,],[178,]),'pvar_def':([105,],[181,]),'nonfluent_def':([105,],[182,]),'statefluent_def':([105,],[183,]),'actionfluent_def':([105,],[184,]),'intermfluent_def':([105,],[185,]),'derivedfluent_def':([105,],[186,]),'observfluent_def':([105,],[187,]),'cpf_def':([107,],[190,]),'lconst_list':([168,262,],[249,325,]),'lconst':([168,262,321,354,420,],[250,250,363,390,440,]),'range_const':([170,362,466,467,468,469,470,],[253,396,471,472,473,474,475,]),'double_type':([170,362,466,467,468,469,470,],[255,255,255,255,255,255,255,]),'int_type':([170,362,466,467,468,469,470,],[256,256,256,256,256,256,256,]),'param_list':([188,],[269,]),'term_list':([209,],[289,]),'term':([209,220,338,416,],[290,303,378,438,]),'expr_list':([210,],[295,]),'object_const_list':([246,],[319,]),'param_list2':([271,],[330,]),'type_spec':([271,376,400,401,402,403,404,405,],[331,407,429,430,431,432,433,434,]),'typed_var_list':([297,300,301,],[341,344,345,]),'typed_var':([297,300,301,381,],[342,342,342,409,]),'enum_list':([328,],[366,]),'lconst_case_list':([354,],[389,]),'case_list':([386,],[414,]),'case_def':([386,437,],[415,452,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rddl","S'",1,None,None,None),
  ('rddl -> rddl_block','rddl',1,'p_rddl','parser.py',245),
  ('rddl_block -> rddl_block domain_block','rddl_block',2,'p_rddl_block','parser.py',249),
  ('rddl_block -> rddl_block instance_block','rddl_block',2,'p_rddl_block','parser.py',250),
  ('rddl_block -> rddl_block nonfluent_block','rddl_block',2,'p_rddl_block','parser.py',251),
  ('rddl_block -> empty','rddl_block',1,'p_rddl_block','parser.py',252),
  ('domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY','domain_block',6,'p_domain_block','parser.py',261),
  ('req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI','req_section',6,'p_req_section','parser.py',266),
  ('req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI','req_section',5,'p_req_section','parser.py',267),
  ('req_section -> empty','req_section',1,'p_req_section','parser.py',268),
  ('domain_list -> domain_list type_section','domain_list',2,'p_domain_list','parser.py',276),
  ('domain_list -> domain_list pvar_section','domain_list',2,'p_domain_list','parser.py',277),
  ('domain_list -> domain_list cpf_section','domain_list',2,'p_domain_list','parser.py',278),
  ('domain_list -> domain_list reward_section','domain_list',2,'p_domain_list','parser.py',279),
  ('domain_list -> domain_list action_precond_section','domain_list',2,'p_domain_list','parser.py',280),
  ('domain_list -> domain_list state_action_constraint_section','domain_list',2,'p_domain_list','parser.py',281),
  ('domain_list -> domain_list state_invariant_section','domain_list',2,'p_domain_list','parser.py',282),
  ('domain_list -> empty','domain_list',1,'p_domain_list','parser.py',283),
  ('type_section -> TYPES LCURLY type_list RCURLY SEMI','type_section',5,'p_type_section','parser.py',292),
  ('type_list -> type_list type_def','type_list',2,'p_type_list','parser.py',297),
  ('type_list -> empty','type_list',1,'p_type_list','parser.py',298),
  ('type_def -> IDENT COLON OBJECT SEMI','type_def',4,'p_type_def','parser.py',306),
  ('type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI','type_def',6,'p_type_def','parser.py',307),
  ('enum_list -> enum_list COMMA ENUM_VAL','enum_list',3,'p_enum_list','parser.py',314),
  ('enum_list -> ENUM_VAL','enum_list',1,'p_enum_list','parser.py',315),
  ('enum_list -> empty','enum_list',1,'p_enum_list','parser.py',316),
  ('pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI','pvar_section',5,'p_pvar_section','parser.py',326),
  ('pvar_list -> pvar_list pvar_def','pvar_list',2,'p_pvar_list','parser.py',331),
  ('pvar_list -> empty','pvar_list',1,'p_pvar_list','parser.py',332),
  ('pvar_def -> nonfluent_def','pvar_def',1,'p_pvar_def','parser.py',340),
  ('pvar_def -> statefluent_def','pvar_def',1,'p_pvar_def','parser.py',341),
  ('pvar_def -> actionfluent_def','pvar_def',1,'p_pvar_def','parser.py',342),
  ('pvar_def -> intermfluent_def','pvar_def',1,'p_pvar_def','parser.py',343),
  ('pvar_def -> derivedfluent_def','pvar_def',1,'p_pvar_def','parser.py',344),
  ('pvar_def -> observfluent_def','pvar_def',1,'p_pvar_def','parser.py',345),
  ('nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',12,'p_nonfluent_def','parser.py',349),
  ('statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',12,'p_statefluent_def','parser.py',358),
  ('actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',12,'p_actionfluent_def','parser.py',365),
  ('intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',12,'p_intermfluent_def','parser.py',372),
  ('intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI','intermfluent_def',8,'p_intermfluent_def','parser.py',373),
  ('derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','derivedfluent_def',12,'p_derivedfluent_def','parser.py',380),
  ('derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI','derivedfluent_def',8,'p_derivedfluent_def','parser.py',381),
  ('observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI','observfluent_def',8,'p_observfluent_def','parser.py',388),
  ('cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI','cpf_section',5,'p_cpf_section','parser.py',392),
  ('cpf_header -> CPFS','cpf_header',1,'p_cpf_header','parser.py',398),
  ('cpf_header -> CDFS','cpf_header',1,'p_cpf_header','parser.py',399),
  ('cpf_list -> cpf_list cpf_def','cpf_list',2,'p_cpf_list','parser.py',403),
  ('cpf_list -> empty','cpf_list',1,'p_cpf_list','parser.py',404),
  ('cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI','cpf_def',4,'p_cpf_def','parser.py',412),
  ('reward_section -> REWARD ASSIGN_EQUAL expr SEMI','reward_section',4,'p_reward_section','parser.py',416),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI','action_precond_section',5,'p_action_precond_section','parser.py',421),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI','action_precond_section',4,'p_action_precond_section','parser.py',422),
  ('action_precond_list -> action_precond_list action_precond_def','action_precond_list',2,'p_action_precond_list','parser.py',430),
  ('action_precond_list -> action_precond_def','action_precond_list',1,'p_action_precond_list','parser.py',431),
  ('action_precond_def -> expr SEMI','action_precond_def',2,'p_action_precond_def','parser.py',439),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI','state_action_constraint_section',5,'p_state_action_constraint_section','parser.py',443),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI','state_action_constraint_section',4,'p_state_action_constraint_section','parser.py',444),
  ('state_cons_list -> state_cons_list state_cons_def','state_cons_list',2,'p_state_cons_list','parser.py',452),
  ('state_cons_list -> state_cons_def','state_cons_list',1,'p_state_cons_list','parser.py',453),
  ('state_cons_def -> expr SEMI','state_cons_def',2,'p_state_cons_def','parser.py',461),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI','state_invariant_section',5,'p_state_invariant_section','parser.py',465),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI','state_invariant_section',4,'p_state_invariant_section','parser.py',466),
  ('state_invariant_list -> state_invariant_list state_invariant_def','state_invariant_list',2,'p_state_invariant_list','parser.py',474),
  ('state_invariant_list -> state_invariant_def','state_invariant_list',1,'p_state_invariant_list','parser.py',475),
  ('state_invariant_def -> expr SEMI','state_invariant_def',2,'p_state_invariant_def','parser.py',483),
  ('term_list -> term_list COMMA term','term_list',3,'p_term_list','parser.py',487),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',488),
  ('term_list -> empty','term_list',1,'p_term_list','parser.py',489),
  ('term -> VAR','term',1,'p_term','parser.py',499),
  ('term -> ENUM_VAL','term',1,'p_term','parser.py',500),
  ('term -> pvar_expr','term',1,'p_term','parser.py',501),
  ('expr -> pvar_expr','expr',1,'p_expr','parser.py',505),
  ('expr -> group_expr','expr',1,'p_expr','parser.py',506),
  ('expr -> function_expr','expr',1,'p_expr','parser.py',507),
  ('expr -> relational_expr','expr',1,'p_expr','parser.py',508),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',509),
  ('expr -> quantifier_expr','expr',1,'p_expr','parser.py',510),
  ('expr -> numerical_expr','expr',1,'p_expr','parser.py',511),
  ('expr -> aggregation_expr','expr',1,'p_expr','parser.py',512),
  ('expr -> control_expr','expr',1,'p_expr','parser.py',513),
  ('expr -> randomvar_expr','expr',1,'p_expr','parser.py',514),
  ('pvar_expr -> IDENT LPAREN term_list RPAREN','pvar_expr',4,'p_pvar_expr','parser.py',518),
  ('pvar_expr -> IDENT','pvar_expr',1,'p_pvar_expr','parser.py',519),
  ('group_expr -> LBRACK expr RBRACK','group_expr',3,'p_group_expr','parser.py',526),
  ('group_expr -> LPAREN expr RPAREN','group_expr',3,'p_group_expr','parser.py',527),
  ('function_expr -> IDENT LBRACK expr_list RBRACK','function_expr',4,'p_function_expr','parser.py',531),
  ('relational_expr -> expr COMP_EQUAL expr','relational_expr',3,'p_relational_expr','parser.py',535),
  ('relational_expr -> expr NEQ expr','relational_expr',3,'p_relational_expr','parser.py',536),
  ('relational_expr -> expr GREATER expr','relational_expr',3,'p_relational_expr','parser.py',537),
  ('relational_expr -> expr GREATEREQ expr','relational_expr',3,'p_relational_expr','parser.py',538),
  ('relational_expr -> expr LESS expr','relational_expr',3,'p_relational_expr','parser.py',539),
  ('relational_expr -> expr LESSEQ expr','relational_expr',3,'p_relational_expr','parser.py',540),
  ('boolean_expr -> expr AND expr','boolean_expr',3,'p_boolean_expr','parser.py',544),
  ('boolean_expr -> expr AMPERSAND expr','boolean_expr',3,'p_boolean_expr','parser.py',545),
  ('boolean_expr -> expr OR expr','boolean_expr',3,'p_boolean_expr','parser.py',546),
  ('boolean_expr -> expr IMPLY expr','boolean_expr',3,'p_boolean_expr','parser.py',547),
  ('boolean_expr -> expr EQUIV expr','boolean_expr',3,'p_boolean_expr','parser.py',548),
  ('boolean_expr -> NOT expr','boolean_expr',2,'p_boolean_expr','parser.py',549),
  ('boolean_expr -> bool_type','boolean_expr',1,'p_boolean_expr','parser.py',550),
  ('quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',559),
  ('quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',560),
  ('numerical_expr -> expr PLUS expr','numerical_expr',3,'p_numerical_expr','parser.py',564),
  ('numerical_expr -> expr MINUS expr','numerical_expr',3,'p_numerical_expr','parser.py',565),
  ('numerical_expr -> expr TIMES expr','numerical_expr',3,'p_numerical_expr','parser.py',566),
  ('numerical_expr -> expr DIV expr','numerical_expr',3,'p_numerical_expr','parser.py',567),
  ('numerical_expr -> MINUS expr','numerical_expr',2,'p_numerical_expr','parser.py',568),
  ('numerical_expr -> PLUS expr','numerical_expr',2,'p_numerical_expr','parser.py',569),
  ('numerical_expr -> INTEGER','numerical_expr',1,'p_numerical_expr','parser.py',570),
  ('numerical_expr -> DOUBLE','numerical_expr',1,'p_numerical_expr','parser.py',571),
  ('aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr','aggregation_expr',6,'p_aggregation_expr','parser.py',580),
  ('control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr','control_expr',8,'p_control_expr','parser.py',584),
  ('control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY','control_expr',7,'p_control_expr','parser.py',585),
  ('randomvar_expr -> BERNOULLI LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',592),
  ('randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',593),
  ('randomvar_expr -> KRON_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',594),
  ('randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',595),
  ('randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',596),
  ('randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',597),
  ('randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',598),
  ('randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',599),
  ('randomvar_expr -> POISSON LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',600),
  ('randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',601),
  ('randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',602),
  ('typed_var_list -> typed_var_list COMMA typed_var','typed_var_list',3,'p_typed_var_list','parser.py',612),
  ('typed_var_list -> typed_var','typed_var_list',1,'p_typed_var_list','parser.py',613),
  ('typed_var -> VAR COLON IDENT','typed_var',3,'p_typed_var','parser.py',621),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser.py',625),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',626),
  ('case_list -> case_list COMMA case_def','case_list',3,'p_case_list','parser.py',634),
  ('case_list -> case_def','case_list',1,'p_case_list','parser.py',635),
  ('case_def -> CASE term COLON expr','case_def',4,'p_case_def','parser.py',643),
  ('case_def -> DEFAULT COLON expr','case_def',3,'p_case_def','parser.py',644),
  ('lconst_case_list -> lconst COLON expr','lconst_case_list',3,'p_lconst_case_list','parser.py',651),
  ('lconst_case_list -> lconst COLON OTHERWISE','lconst_case_list',3,'p_lconst_case_list','parser.py',652),
  ('lconst_case_list -> lconst_case_list COMMA lconst COLON expr','lconst_case_list',5,'p_lconst_case_list','parser.py',653),
  ('lconst -> IDENT','lconst',1,'p_lconst','parser.py',661),
  ('lconst -> ENUM_VAL','lconst',1,'p_lconst','parser.py',662),
  ('param_list -> COLON','param_list',1,'p_param_list','parser.py',667),
  ('param_list -> LPAREN param_list2 RPAREN COLON','param_list',4,'p_param_list','parser.py',668),
  ('param_list2 -> type_spec','param_list2',1,'p_param_list2','parser.py',675),
  ('param_list2 -> param_list2 COMMA type_spec','param_list2',3,'p_param_list2','parser.py',676),
  ('type_spec -> IDENT','type_spec',1,'p_type_spec','parser.py',694),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',695),
  ('type_spec -> REAL','type_spec',1,'p_type_spec','parser.py',696),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',697),
  ('range_const -> bool_type','range_const',1,'p_range_const','parser.py',701),
  ('range_const -> double_type','range_const',1,'p_range_const','parser.py',702),
  ('range_const -> int_type','range_const',1,'p_range_const','parser.py',703),
  ('range_const -> IDENT','range_const',1,'p_range_const','parser.py',704),
  ('bool_type -> TRUE','bool_type',1,'p_bool_type','parser.py',708),
  ('bool_type -> FALSE','bool_type',1,'p_bool_type','parser.py',709),
  ('double_type -> DOUBLE','double_type',1,'p_double_type','parser.py',713),
  ('double_type -> MINUS DOUBLE','double_type',2,'p_double_type','parser.py',714),
  ('double_type -> POS_INF','double_type',1,'p_double_type','parser.py',715),
  ('double_type -> NEG_INF','double_type',1,'p_double_type','parser.py',716),
  ('int_type -> INTEGER','int_type',1,'p_int_type','parser.py',720),
  ('int_type -> MINUS INTEGER','int_type',2,'p_int_type','parser.py',721),
  ('pos_int_type_or_pos_inf -> INTEGER','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',725),
  ('pos_int_type_or_pos_inf -> POS_INF','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',726),
  ('instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY','instance_block',5,'p_instance_block','parser.py',730),
  ('instance_list -> instance_list domain_section','instance_list',2,'p_instance_list','parser.py',735),
  ('instance_list -> instance_list nonfluents_section','instance_list',2,'p_instance_list','parser.py',736),
  ('instance_list -> instance_list objects_section','instance_list',2,'p_instance_list','parser.py',737),
  ('instance_list -> instance_list init_state_section','instance_list',2,'p_instance_list','parser.py',738),
  ('instance_list -> instance_list max_nondef_actions_section','instance_list',2,'p_instance_list','parser.py',739),
  ('instance_list -> instance_list horizon_spec_section','instance_list',2,'p_instance_list','parser.py',740),
  ('instance_list -> instance_list discount_section','instance_list',2,'p_instance_list','parser.py',741),
  ('instance_list -> empty','instance_list',1,'p_instance_list','parser.py',742),
  ('domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI','domain_section',4,'p_domain_section','parser.py',751),
  ('nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI','nonfluents_section',4,'p_nonfluents_section','parser.py',755),
  ('objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI','objects_section',5,'p_objects_section','parser.py',760),
  ('init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI','init_state_section',5,'p_init_state_section','parser.py',765),
  ('max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','max_nondef_actions_section',4,'p_max_nondef_actions_section','parser.py',770),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','horizon_spec_section',4,'p_horizon_spec_section','parser.py',775),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN','horizon_spec_section',6,'p_horizon_spec_section','parser.py',776),
  ('discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI','discount_section',4,'p_discount_section','parser.py',784),
  ('nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY','nonfluent_block',5,'p_nonfluent_block','parser.py',789),
  ('nonfluent_list -> nonfluent_list domain_section','nonfluent_list',2,'p_nonfluent_list','parser.py',794),
  ('nonfluent_list -> nonfluent_list objects_section','nonfluent_list',2,'p_nonfluent_list','parser.py',795),
  ('nonfluent_list -> nonfluent_list init_non_fluent_section','nonfluent_list',2,'p_nonfluent_list','parser.py',796),
  ('nonfluent_list -> empty','nonfluent_list',1,'p_nonfluent_list','parser.py',797),
  ('init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI','init_non_fluent_section',5,'p_init_non_fluent_section','parser.py',806),
  ('objects_list -> objects_list objects_def','objects_list',2,'p_objects_list','parser.py',811),
  ('objects_list -> objects_def','objects_list',1,'p_objects_list','parser.py',812),
  ('objects_list -> empty','objects_list',1,'p_objects_list','parser.py',813),
  ('objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI','objects_def',6,'p_objects_def','parser.py',821),
  ('object_const_list -> object_const_list COMMA IDENT','object_const_list',3,'p_object_const_list','parser.py',825),
  ('object_const_list -> IDENT','object_const_list',1,'p_object_const_list','parser.py',826),
  ('pvar_inst_list -> pvar_inst_list pvar_inst_def','pvar_inst_list',2,'p_pvar_inst_list','parser.py',834),
  ('pvar_inst_list -> pvar_inst_def','pvar_inst_list',1,'p_pvar_inst_list','parser.py',835),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',5,'p_pvar_inst_def','parser.py',843),
  ('pvar_inst_def -> IDENT SEMI','pvar_inst_def',2,'p_pvar_inst_def','parser.py',844),
  ('pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',6,'p_pvar_inst_def','parser.py',845),
  ('pvar_inst_def -> NOT IDENT SEMI','pvar_inst_def',3,'p_pvar_inst_def','parser.py',846),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI','pvar_inst_def',7,'p_pvar_inst_def','parser.py',847),
  ('pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI','pvar_inst_def',4,'p_pvar_inst_def','parser.py',848),
  ('lconst_list -> lconst_list COMMA lconst','lconst_list',3,'p_lconst_list','parser.py',863),
  ('lconst_list -> lconst','lconst_list',1,'p_lconst_list','parser.py',864),
  ('string_list -> string_list COMMA IDENT','string_list',3,'p_string_list','parser.py',872),
  ('string_list -> IDENT','string_list',1,'p_string_list','parser.py',873),
  ('string_list -> empty','string_list',1,'p_string_list','parser.py',874),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',884),
]
